
RTOS_010_QUEUE_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c0  080049c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080049c0  080049c0  000149c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049c8  080049c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080049d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004038  20000074  08004a44  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040ac  08004a44  000240ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6f9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242e  00000000  00000000  0002f79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00031bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  000325f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021bfb  00000000  00000000  00032f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc31  00000000  00000000  00054b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb22f  00000000  00000000  00061774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c9a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc0  00000000  00000000  0012c9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800476c 	.word	0x0800476c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800476c 	.word	0x0800476c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000e4 	.word	0x200000e4

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b08e      	sub	sp, #56	; 0x38
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fafd 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f87d 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f903 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f8d7 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  simpleQueue = xQueueCreate(5,sizeof(unsigned int));
 80005c2:	2200      	movs	r2, #0
 80005c4:	2104      	movs	r1, #4
 80005c6:	2005      	movs	r0, #5
 80005c8:	f001 fe60 	bl	800228c <xQueueGenericCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a2c      	ldr	r2, [pc, #176]	; (8000680 <main+0xd4>)
 80005d0:	6013      	str	r3, [r2, #0]

  if(simpleQueue != NULL)
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <main+0xd4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d01c      	beq.n	8000614 <main+0x68>
  {
	  char data[] = "Queue olusumu basarili";
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <main+0xd8>)
 80005dc:	f107 0418 	add.w	r4, r7, #24
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ea:	6020      	str	r0, [r4, #0]
 80005ec:	3404      	adds	r4, #4
 80005ee:	8021      	strh	r1, [r4, #0]
 80005f0:	3402      	adds	r4, #2
 80005f2:	0c0b      	lsrs	r3, r1, #16
 80005f4:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 500);
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fde8 	bl	80001d0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f107 0118 	add.w	r1, r7, #24
 8000608:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800060c:	481e      	ldr	r0, [pc, #120]	; (8000688 <main+0xdc>)
 800060e:	f001 fa58 	bl	8001ac2 <HAL_UART_Transmit>
 8000612:	e014      	b.n	800063e <main+0x92>

  }
  else
  {
	  char data[] = "Queue olusumu basarisiz";
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <main+0xe0>)
 8000616:	463c      	mov	r4, r7
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000622:	e884 0003 	stmia.w	r4, {r0, r1}
	  HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 500);
 8000626:	463b      	mov	r3, r7
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fdd1 	bl	80001d0 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	4639      	mov	r1, r7
 8000634:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <main+0xdc>)
 800063a:	f001 fa42 	bl	8001ac2 <HAL_UART_Transmit>
  }

  xTaskCreate(TASK1_CONTROL, "Task1", configMINIMAL_STACK_SIZE, NULL, 3, &Task1_Handle);
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <main+0xe4>)
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2303      	movs	r3, #3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	4912      	ldr	r1, [pc, #72]	; (8000694 <main+0xe8>)
 800064c:	4812      	ldr	r0, [pc, #72]	; (8000698 <main+0xec>)
 800064e:	f002 f9c2 	bl	80029d6 <xTaskCreate>
  xTaskCreate(TASK2_CONTROL, "Task2", configMINIMAL_STACK_SIZE, (void *)123, 2, &Task2_Handle);
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <main+0xf0>)
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2302      	movs	r3, #2
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	237b      	movs	r3, #123	; 0x7b
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	4910      	ldr	r1, [pc, #64]	; (80006a0 <main+0xf4>)
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <main+0xf8>)
 8000662:	f002 f9b8 	bl	80029d6 <xTaskCreate>
  xTaskCreate(RECEIVER_TASK, "Receiver Task", configMINIMAL_STACK_SIZE, NULL, 1, &ReceiverTaskHandle);
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <main+0xfc>)
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2301      	movs	r3, #1
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	490e      	ldr	r1, [pc, #56]	; (80006ac <main+0x100>)
 8000674:	480e      	ldr	r0, [pc, #56]	; (80006b0 <main+0x104>)
 8000676:	f002 f9ae 	bl	80029d6 <xTaskCreate>

  vTaskStartScheduler();
 800067a:	f002 fb17 	bl	8002cac <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
 800067e:	e7fe      	b.n	800067e <main+0xd2>
 8000680:	2000404c 	.word	0x2000404c
 8000684:	080047a4 	.word	0x080047a4
 8000688:	20004054 	.word	0x20004054
 800068c:	080047bc 	.word	0x080047bc
 8000690:	20004048 	.word	0x20004048
 8000694:	08004784 	.word	0x08004784
 8000698:	080007f9 	.word	0x080007f9
 800069c:	20004050 	.word	0x20004050
 80006a0:	0800478c 	.word	0x0800478c
 80006a4:	08000871 	.word	0x08000871
 80006a8:	20004044 	.word	0x20004044
 80006ac:	08004794 	.word	0x08004794
 80006b0:	080008e9 	.word	0x080008e9

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fc2a 	bl	8003f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xb4>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xb4>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xb4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <SystemClock_Config+0xb8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <SystemClock_Config+0xb8>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <SystemClock_Config+0xb8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fd37 	bl	8001198 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000730:	f000 f92e 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ff9a 	bl	8001688 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800075a:	f000 f919 	bl	8000990 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f001 f93e 	bl	8001a28 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f8ed 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20004054 	.word	0x20004054
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_GPIO_Init+0x30>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <MX_GPIO_Init+0x30>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_GPIO_Init+0x30>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <TASK1_CONTROL>:

/* USER CODE BEGIN 4 */
void TASK1_CONTROL(void *params)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	int i = 567;
 8000800:	f240 2337 	movw	r3, #567	; 0x237
 8000804:	60bb      	str	r3, [r7, #8]
	uint32_t tickDelay = pdMS_TO_TICKS(2000);
 8000806:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800080a:	617b      	str	r3, [r7, #20]
	for(;;)
	{
		char *str = "Entered TASK1\nAbout to send a number to the queue\n\n";
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <TASK1_CONTROL+0x68>)
 800080e:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000810:	6938      	ldr	r0, [r7, #16]
 8000812:	f7ff fcdd 	bl	80001d0 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	6939      	ldr	r1, [r7, #16]
 8000820:	4810      	ldr	r0, [pc, #64]	; (8000864 <TASK1_CONTROL+0x6c>)
 8000822:	f001 f94e 	bl	8001ac2 <HAL_UART_Transmit>
		if(xQueueSend(simpleQueue, &i, portMAX_DELAY) == pdPASS)
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <TASK1_CONTROL+0x70>)
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	f107 0108 	add.w	r1, r7, #8
 800082e:	2300      	movs	r3, #0
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	f001 fd84 	bl	8002340 <xQueueGenericSend>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d10c      	bne.n	8000858 <TASK1_CONTROL+0x60>
		{
			char *str2 = "Successfully sent the number to the queue\nLeaving from TASK1\n\n";
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <TASK1_CONTROL+0x74>)
 8000840:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	f7ff fcc4 	bl	80001d0 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <TASK1_CONTROL+0x6c>)
 8000854:	f001 f935 	bl	8001ac2 <HAL_UART_Transmit>
		}
		vTaskDelay(tickDelay);
 8000858:	6978      	ldr	r0, [r7, #20]
 800085a:	f002 f9f3 	bl	8002c44 <vTaskDelay>
	{
 800085e:	e7d5      	b.n	800080c <TASK1_CONTROL+0x14>
 8000860:	080047d4 	.word	0x080047d4
 8000864:	20004054 	.word	0x20004054
 8000868:	2000404c 	.word	0x2000404c
 800086c:	08004808 	.word	0x08004808

08000870 <TASK2_CONTROL>:
	}
}

void TASK2_CONTROL(void *params)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	int toSend;
	uint32_t tickDelay = pdMS_TO_TICKS(1000);
 8000878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087c:	617b      	str	r3, [r7, #20]
	for(;;)
	{
		toSend = (int)params;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60bb      	str	r3, [r7, #8]
		char *str = "Entered TASK2\nAbout to send a number to the queue\n\n";
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <TASK2_CONTROL+0x68>)
 8000884:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000886:	6938      	ldr	r0, [r7, #16]
 8000888:	f7ff fca2 	bl	80001d0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	6939      	ldr	r1, [r7, #16]
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <TASK2_CONTROL+0x6c>)
 8000898:	f001 f913 	bl	8001ac2 <HAL_UART_Transmit>

		if(xQueueSend(simpleQueue, &toSend, portMAX_DELAY) == pdPASS)
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <TASK2_CONTROL+0x70>)
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	f107 0108 	add.w	r1, r7, #8
 80008a4:	2300      	movs	r3, #0
 80008a6:	f04f 32ff 	mov.w	r2, #4294967295
 80008aa:	f001 fd49 	bl	8002340 <xQueueGenericSend>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10c      	bne.n	80008ce <TASK2_CONTROL+0x5e>
		{
			char *str2 = "Successfully sent the number to the queue\nLeaving from TASK2\n\n";
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <TASK2_CONTROL+0x74>)
 80008b6:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t*)str2, strlen(str2), HAL_MAX_DELAY);
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	68f9      	ldr	r1, [r7, #12]
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <TASK2_CONTROL+0x6c>)
 80008ca:	f001 f8fa 	bl	8001ac2 <HAL_UART_Transmit>
		}


		vTaskDelay(tickDelay);
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f002 f9b8 	bl	8002c44 <vTaskDelay>
	{
 80008d4:	e7d3      	b.n	800087e <TASK2_CONTROL+0xe>
 80008d6:	bf00      	nop
 80008d8:	08004848 	.word	0x08004848
 80008dc:	20004054 	.word	0x20004054
 80008e0:	2000404c 	.word	0x2000404c
 80008e4:	0800487c 	.word	0x0800487c

080008e8 <RECEIVER_TASK>:
	}
}

void RECEIVER_TASK(void *params)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0a0      	sub	sp, #128	; 0x80
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	int received = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t tickDelay = pdMS_TO_TICKS(5000);
 80008f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80008f8:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(;;)
	{
		char *str = "Entered RECEIVER TASK\nAbout to receive a number from the queue\n\n";
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <RECEIVER_TASK+0x94>)
 80008fc:	67bb      	str	r3, [r7, #120]	; 0x78
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80008fe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000900:	f7ff fc66 	bl	80001d0 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800090e:	481c      	ldr	r0, [pc, #112]	; (8000980 <RECEIVER_TASK+0x98>)
 8000910:	f001 f8d7 	bl	8001ac2 <HAL_UART_Transmit>

		if(xQueueReceive(simpleQueue, &received, portMAX_DELAY) == pdTRUE)
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <RECEIVER_TASK+0x9c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fe0b 	bl	800253c <xQueueReceive>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	d115      	bne.n	8000958 <RECEIVER_TASK+0x70>
		{
			char str2[100];
			sprintf(str2,"Successfully RECEIVED the number %d to the queue\nLeaving RECEIVER Task\n\n",received);
 800092c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4915      	ldr	r1, [pc, #84]	; (8000988 <RECEIVER_TASK+0xa0>)
 8000934:	4618      	mov	r0, r3
 8000936:	f003 faf9 	bl	8003f2c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)str2, strlen(str2), HAL_MAX_DELAY);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc46 	bl	80001d0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <RECEIVER_TASK+0x98>)
 8000952:	f001 f8b6 	bl	8001ac2 <HAL_UART_Transmit>
 8000956:	e00c      	b.n	8000972 <RECEIVER_TASK+0x8a>
		}
		else
		{
			char *str2 = "Error in Receiving from Queue\n\n";
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <RECEIVER_TASK+0xa4>)
 800095a:	677b      	str	r3, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 800095c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800095e:	f7ff fc37 	bl	80001d0 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <RECEIVER_TASK+0x98>)
 800096e:	f001 f8a8 	bl	8001ac2 <HAL_UART_Transmit>
		}

		vTaskDelay(tickDelay);
 8000972:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000974:	f002 f966 	bl	8002c44 <vTaskDelay>
	{
 8000978:	e7bf      	b.n	80008fa <RECEIVER_TASK+0x12>
 800097a:	bf00      	nop
 800097c:	080048bc 	.word	0x080048bc
 8000980:	20004054 	.word	0x20004054
 8000984:	2000404c 	.word	0x2000404c
 8000988:	08004900 	.word	0x08004900
 800098c:	0800494c 	.word	0x0800494c

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_MspInit+0x54>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <HAL_MspInit+0x54>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x54>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_MspInit+0x54>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_MspInit+0x54>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_MspInit+0x54>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	210f      	movs	r1, #15
 80009de:	f06f 0001 	mvn.w	r0, #1
 80009e2:	f000 fa14 	bl	8000e0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d12b      	bne.n	8000a6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_UART_MspInit+0x8c>)
 8000a6a:	f000 f9f9 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3728      	adds	r7, #40	; 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f8ce 	bl	8000c54 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ab8:	f002 fcf6 	bl	80034a8 <xTaskGetSchedulerState>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d001      	beq.n	8000ac6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ac2:	f002 ffb9 	bl	8003a38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <_sbrk+0x5c>)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <_sbrk+0x60>)
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <_sbrk+0x64>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <_sbrk+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d207      	bcs.n	8000b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000afc:	f003 f9d6 	bl	8003eac <__errno>
 8000b00:	4603      	mov	r3, r0
 8000b02:	220c      	movs	r2, #12
 8000b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	e009      	b.n	8000b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <_sbrk+0x64>)
 8000b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20020000 	.word	0x20020000
 8000b2c:	00000400 	.word	0x00000400
 8000b30:	200002e4 	.word	0x200002e4
 8000b34:	200040b0 	.word	0x200040b0

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b62:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b78:	4c0b      	ldr	r4, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b86:	f7ff ffd7 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f003 f995 	bl	8003eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fd0d 	bl	80005ac <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ba0:	080049d0 	.word	0x080049d0
  ldr r2, =_sbss
 8000ba4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ba8:	200040ac 	.word	0x200040ac

08000bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <HAL_Init+0x40>)
 8000bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_Init+0x40>)
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_Init+0x40>)
 8000bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f90d 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f808 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff feda 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023c00 	.word	0x40023c00

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x54>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x58>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f917 	bl	8000e46 <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f8ed 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_InitTick+0x5c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000004 	.word	0x20000004

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20004098 	.word	0x20004098

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20004098 	.word	0x20004098

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff47 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff5c 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffb0 	bl	8000db4 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e16b      	b.n	8001154 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f040 815a 	bne.w	800114e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d017      	beq.n	8000f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80b4 	beq.w	800114e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b60      	ldr	r3, [pc, #384]	; (800116c <HAL_GPIO_Init+0x30c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a5f      	ldr	r2, [pc, #380]	; (800116c <HAL_GPIO_Init+0x30c>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	; (800116c <HAL_GPIO_Init+0x30c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001002:	4a5b      	ldr	r2, [pc, #364]	; (8001170 <HAL_GPIO_Init+0x310>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_GPIO_Init+0x314>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d02b      	beq.n	8001086 <HAL_GPIO_Init+0x226>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a51      	ldr	r2, [pc, #324]	; (8001178 <HAL_GPIO_Init+0x318>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d025      	beq.n	8001082 <HAL_GPIO_Init+0x222>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a50      	ldr	r2, [pc, #320]	; (800117c <HAL_GPIO_Init+0x31c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d01f      	beq.n	800107e <HAL_GPIO_Init+0x21e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4f      	ldr	r2, [pc, #316]	; (8001180 <HAL_GPIO_Init+0x320>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d019      	beq.n	800107a <HAL_GPIO_Init+0x21a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4e      	ldr	r2, [pc, #312]	; (8001184 <HAL_GPIO_Init+0x324>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x216>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <HAL_GPIO_Init+0x328>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x212>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4c      	ldr	r2, [pc, #304]	; (800118c <HAL_GPIO_Init+0x32c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x20e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4b      	ldr	r2, [pc, #300]	; (8001190 <HAL_GPIO_Init+0x330>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x20a>
 8001066:	2307      	movs	r3, #7
 8001068:	e00e      	b.n	8001088 <HAL_GPIO_Init+0x228>
 800106a:	2308      	movs	r3, #8
 800106c:	e00c      	b.n	8001088 <HAL_GPIO_Init+0x228>
 800106e:	2306      	movs	r3, #6
 8001070:	e00a      	b.n	8001088 <HAL_GPIO_Init+0x228>
 8001072:	2305      	movs	r3, #5
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x228>
 8001076:	2304      	movs	r3, #4
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x228>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x228>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x228>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x228>
 8001086:	2300      	movs	r3, #0
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001098:	4935      	ldr	r1, [pc, #212]	; (8001170 <HAL_GPIO_Init+0x310>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_GPIO_Init+0x334>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ca:	4a32      	ldr	r2, [pc, #200]	; (8001194 <HAL_GPIO_Init+0x334>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d0:	4b30      	ldr	r3, [pc, #192]	; (8001194 <HAL_GPIO_Init+0x334>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f4:	4a27      	ldr	r2, [pc, #156]	; (8001194 <HAL_GPIO_Init+0x334>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_GPIO_Init+0x334>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_GPIO_Init+0x334>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_GPIO_Init+0x334>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <HAL_GPIO_Init+0x334>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	f67f ae90 	bls.w	8000e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40013800 	.word	0x40013800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40021000 	.word	0x40021000
 8001188:	40021400 	.word	0x40021400
 800118c:	40021800 	.word	0x40021800
 8001190:	40021c00 	.word	0x40021c00
 8001194:	40013c00 	.word	0x40013c00

08001198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e264      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d075      	beq.n	80012a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b6:	4ba3      	ldr	r3, [pc, #652]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d00c      	beq.n	80011dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4ba0      	ldr	r3, [pc, #640]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d112      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ce:	4b9d      	ldr	r3, [pc, #628]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011da:	d10b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	4b99      	ldr	r3, [pc, #612]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d05b      	beq.n	80012a0 <HAL_RCC_OscConfig+0x108>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d157      	bne.n	80012a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e23f      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fc:	d106      	bne.n	800120c <HAL_RCC_OscConfig+0x74>
 80011fe:	4b91      	ldr	r3, [pc, #580]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a90      	ldr	r2, [pc, #576]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xb0>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x98>
 8001216:	4b8b      	ldr	r3, [pc, #556]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a8a      	ldr	r2, [pc, #552]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a87      	ldr	r2, [pc, #540]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xb0>
 8001230:	4b84      	ldr	r3, [pc, #528]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a83      	ldr	r2, [pc, #524]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b81      	ldr	r3, [pc, #516]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a80      	ldr	r2, [pc, #512]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fd14 	bl	8000c7c <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fd10 	bl	8000c7c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e204      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xc0>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fd00 	bl	8000c7c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fcfc 	bl	8000c7c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1f0      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0xe8>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d063      	beq.n	8001376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c6:	4b5f      	ldr	r3, [pc, #380]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x152>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1c4      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b56      	ldr	r3, [pc, #344]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4952      	ldr	r1, [pc, #328]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e03a      	b.n	8001376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b4f      	ldr	r3, [pc, #316]	; (8001448 <HAL_RCC_OscConfig+0x2b0>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130e:	f7ff fcb5 	bl	8000c7c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fcb1 	bl	8000c7c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e1a5      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4940      	ldr	r1, [pc, #256]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <HAL_RCC_OscConfig+0x2b0>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fc94 	bl	8000c7c <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc90 	bl	8000c7c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e184      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d030      	beq.n	80013e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d016      	beq.n	80013b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_RCC_OscConfig+0x2b4>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fc74 	bl	8000c7c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fc70 	bl	8000c7c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e164      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x200>
 80013b6:	e015      	b.n	80013e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_OscConfig+0x2b4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fc5d 	bl	8000c7c <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c6:	f7ff fc59 	bl	8000c7c <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e14d      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a0 	beq.w	8001532 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10f      	bne.n	8001422 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d121      	bne.n	8001472 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fc1f 	bl	8000c7c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e011      	b.n	8001466 <HAL_RCC_OscConfig+0x2ce>
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	42470000 	.word	0x42470000
 800144c:	42470e80 	.word	0x42470e80
 8001450:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001454:	f7ff fc12 	bl	8000c7c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e106      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b85      	ldr	r3, [pc, #532]	; (800167c <HAL_RCC_OscConfig+0x4e4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x2f0>
 800147a:	4b81      	ldr	r3, [pc, #516]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	4a80      	ldr	r2, [pc, #512]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
 8001486:	e01c      	b.n	80014c2 <HAL_RCC_OscConfig+0x32a>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d10c      	bne.n	80014aa <HAL_RCC_OscConfig+0x312>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a7a      	ldr	r2, [pc, #488]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	4b78      	ldr	r3, [pc, #480]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a77      	ldr	r2, [pc, #476]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
 80014a8:	e00b      	b.n	80014c2 <HAL_RCC_OscConfig+0x32a>
 80014aa:	4b75      	ldr	r3, [pc, #468]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a74      	ldr	r2, [pc, #464]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	4b72      	ldr	r3, [pc, #456]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a71      	ldr	r2, [pc, #452]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d015      	beq.n	80014f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ca:	f7ff fbd7 	bl	8000c7c <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fbd3 	bl	8000c7c <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0c5      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	4b65      	ldr	r3, [pc, #404]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0ee      	beq.n	80014d2 <HAL_RCC_OscConfig+0x33a>
 80014f4:	e014      	b.n	8001520 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fbc1 	bl	8000c7c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fbbd 	bl	8000c7c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0af      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001514:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ee      	bne.n	80014fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d105      	bne.n	8001532 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001526:	4b56      	ldr	r3, [pc, #344]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a55      	ldr	r2, [pc, #340]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 800152c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 809b 	beq.w	8001672 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800153c:	4b50      	ldr	r3, [pc, #320]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b08      	cmp	r3, #8
 8001546:	d05c      	beq.n	8001602 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d141      	bne.n	80015d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001550:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_RCC_OscConfig+0x4ec>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7ff fb91 	bl	8000c7c <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155e:	f7ff fb8d 	bl	8000c7c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e081      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001570:	4b43      	ldr	r3, [pc, #268]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	019b      	lsls	r3, r3, #6
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	3b01      	subs	r3, #1
 8001596:	041b      	lsls	r3, r3, #16
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	4937      	ldr	r1, [pc, #220]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a6:	4b37      	ldr	r3, [pc, #220]	; (8001684 <HAL_RCC_OscConfig+0x4ec>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb66 	bl	8000c7c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb62 	bl	8000c7c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e056      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x41c>
 80015d2:	e04e      	b.n	8001672 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_RCC_OscConfig+0x4ec>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fb4f 	bl	8000c7c <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff fb4b 	bl	8000c7c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e03f      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x44a>
 8001600:	e037      	b.n	8001672 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e032      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_RCC_OscConfig+0x4e8>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d028      	beq.n	800166e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d121      	bne.n	800166e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d11a      	bne.n	800166e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800163e:	4013      	ands	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001644:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001646:	4293      	cmp	r3, r2
 8001648:	d111      	bne.n	800166e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d107      	bne.n	800166e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40007000 	.word	0x40007000
 8001680:	40023800 	.word	0x40023800
 8001684:	42470060 	.word	0x42470060

08001688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0cc      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b68      	ldr	r3, [pc, #416]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d90c      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b65      	ldr	r3, [pc, #404]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0b8      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016dc:	4b59      	ldr	r3, [pc, #356]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a58      	ldr	r2, [pc, #352]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f4:	4b53      	ldr	r3, [pc, #332]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a52      	ldr	r2, [pc, #328]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	494d      	ldr	r1, [pc, #308]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d044      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b47      	ldr	r3, [pc, #284]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d119      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d003      	beq.n	8001746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001742:	2b03      	cmp	r3, #3
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e06f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e067      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f023 0203 	bic.w	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4934      	ldr	r1, [pc, #208]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	4313      	orrs	r3, r2
 8001776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001778:	f7ff fa80 	bl	8000c7c <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	e00a      	b.n	8001796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001780:	f7ff fa7c 	bl	8000c7c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e04f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 020c 	and.w	r2, r3, #12
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d1eb      	bne.n	8001780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d20c      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b22      	ldr	r3, [pc, #136]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e032      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4916      	ldr	r1, [pc, #88]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800180e:	f000 f821 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8001812:	4602      	mov	r2, r0
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_ClockConfig+0x1c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f9e0 	bl	8000bf4 <HAL_InitTick>

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00
 8001844:	40023800 	.word	0x40023800
 8001848:	08004974 	.word	0x08004974
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800185a:	2100      	movs	r1, #0
 800185c:	6079      	str	r1, [r7, #4]
 800185e:	2100      	movs	r1, #0
 8001860:	60f9      	str	r1, [r7, #12]
 8001862:	2100      	movs	r1, #0
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001866:	2100      	movs	r1, #0
 8001868:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800186a:	4952      	ldr	r1, [pc, #328]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800186c:	6889      	ldr	r1, [r1, #8]
 800186e:	f001 010c 	and.w	r1, r1, #12
 8001872:	2908      	cmp	r1, #8
 8001874:	d00d      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x3e>
 8001876:	2908      	cmp	r1, #8
 8001878:	f200 8094 	bhi.w	80019a4 <HAL_RCC_GetSysClockFreq+0x150>
 800187c:	2900      	cmp	r1, #0
 800187e:	d002      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x32>
 8001880:	2904      	cmp	r1, #4
 8001882:	d003      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x38>
 8001884:	e08e      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001886:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001888:	60bb      	str	r3, [r7, #8]
       break;
 800188a:	e08e      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800188c:	4b4b      	ldr	r3, [pc, #300]	; (80019bc <HAL_RCC_GetSysClockFreq+0x168>)
 800188e:	60bb      	str	r3, [r7, #8]
      break;
 8001890:	e08b      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001892:	4948      	ldr	r1, [pc, #288]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001894:	6849      	ldr	r1, [r1, #4]
 8001896:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800189a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800189c:	4945      	ldr	r1, [pc, #276]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800189e:	6849      	ldr	r1, [r1, #4]
 80018a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018a4:	2900      	cmp	r1, #0
 80018a6:	d024      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a8:	4942      	ldr	r1, [pc, #264]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80018aa:	6849      	ldr	r1, [r1, #4]
 80018ac:	0989      	lsrs	r1, r1, #6
 80018ae:	4608      	mov	r0, r1
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018b8:	f04f 0500 	mov.w	r5, #0
 80018bc:	ea00 0204 	and.w	r2, r0, r4
 80018c0:	ea01 0305 	and.w	r3, r1, r5
 80018c4:	493d      	ldr	r1, [pc, #244]	; (80019bc <HAL_RCC_GetSysClockFreq+0x168>)
 80018c6:	fb01 f003 	mul.w	r0, r1, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	fb01 f102 	mul.w	r1, r1, r2
 80018d0:	1844      	adds	r4, r0, r1
 80018d2:	493a      	ldr	r1, [pc, #232]	; (80019bc <HAL_RCC_GetSysClockFreq+0x168>)
 80018d4:	fba2 0101 	umull	r0, r1, r2, r1
 80018d8:	1863      	adds	r3, r4, r1
 80018da:	4619      	mov	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	461a      	mov	r2, r3
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	f7fe fccc 	bl	8000280 <__aeabi_uldivmod>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4613      	mov	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e04a      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	461a      	mov	r2, r3
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	ea02 0400 	and.w	r4, r2, r0
 800190a:	ea03 0501 	and.w	r5, r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	014b      	lsls	r3, r1, #5
 800191c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001920:	0142      	lsls	r2, r0, #5
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	1b00      	subs	r0, r0, r4
 8001928:	eb61 0105 	sbc.w	r1, r1, r5
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	018b      	lsls	r3, r1, #6
 8001936:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800193a:	0182      	lsls	r2, r0, #6
 800193c:	1a12      	subs	r2, r2, r0
 800193e:	eb63 0301 	sbc.w	r3, r3, r1
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	00d9      	lsls	r1, r3, #3
 800194c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001950:	00d0      	lsls	r0, r2, #3
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	1912      	adds	r2, r2, r4
 8001958:	eb45 0303 	adc.w	r3, r5, r3
 800195c:	f04f 0000 	mov.w	r0, #0
 8001960:	f04f 0100 	mov.w	r1, #0
 8001964:	0299      	lsls	r1, r3, #10
 8001966:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800196a:	0290      	lsls	r0, r2, #10
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	461a      	mov	r2, r3
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	f7fe fc80 	bl	8000280 <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4613      	mov	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	60bb      	str	r3, [r7, #8]
      break;
 80019a2:	e002      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80019a6:	60bb      	str	r3, [r7, #8]
      break;
 80019a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019aa:	68bb      	ldr	r3, [r7, #8]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bdb0      	pop	{r4, r5, r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	017d7840 	.word	0x017d7840

080019c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000

080019d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	08004984 	.word	0x08004984

08001a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a04:	f7ff ffdc 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	0b5b      	lsrs	r3, r3, #13
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	08004984 	.word	0x08004984

08001a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e03f      	b.n	8001aba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe ffd0 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f929 	bl	8001cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b08a      	sub	sp, #40	; 0x28
 8001ac6:	af02      	add	r7, sp, #8
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d17c      	bne.n	8001bdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <HAL_UART_Transmit+0x2c>
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e075      	b.n	8001bde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_UART_Transmit+0x3e>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e06e      	b.n	8001bde <HAL_UART_Transmit+0x11c>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2221      	movs	r2, #33	; 0x21
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b16:	f7ff f8b1 	bl	8000c7c <HAL_GetTick>
 8001b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	88fa      	ldrh	r2, [r7, #6]
 8001b20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	88fa      	ldrh	r2, [r7, #6]
 8001b26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b30:	d108      	bne.n	8001b44 <HAL_UART_Transmit+0x82>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d104      	bne.n	8001b44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	e003      	b.n	8001b4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b54:	e02a      	b.n	8001bac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f840 	bl	8001be6 <UART_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e036      	b.n	8001bde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10b      	bne.n	8001b8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3302      	adds	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e007      	b.n	8001b9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1cf      	bne.n	8001b56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2140      	movs	r1, #64	; 0x40
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f810 	bl	8001be6 <UART_WaitOnFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e006      	b.n	8001bde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e000      	b.n	8001bde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
  }
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b090      	sub	sp, #64	; 0x40
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf6:	e050      	b.n	8001c9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfe:	d04c      	beq.n	8001c9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c06:	f7ff f839 	bl	8000c7c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d241      	bcs.n	8001c9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	330c      	adds	r3, #12
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c20:	e853 3f00 	ldrex	r3, [r3]
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	330c      	adds	r3, #12
 8001c34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c36:	637a      	str	r2, [r7, #52]	; 0x34
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c3e:	e841 2300 	strex	r3, r2, [r1]
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1e5      	bne.n	8001c16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3314      	adds	r3, #20
 8001c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	e853 3f00 	ldrex	r3, [r3]
 8001c58:	613b      	str	r3, [r7, #16]
   return(result);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3314      	adds	r3, #20
 8001c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c6a:	623a      	str	r2, [r7, #32]
 8001c6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c6e:	69f9      	ldr	r1, [r7, #28]
 8001c70:	6a3a      	ldr	r2, [r7, #32]
 8001c72:	e841 2300 	strex	r3, r2, [r1]
 8001c76:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1e5      	bne.n	8001c4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2220      	movs	r2, #32
 8001c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e00f      	b.n	8001cba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	bf0c      	ite	eq
 8001caa:	2301      	moveq	r3, #1
 8001cac:	2300      	movne	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d09f      	beq.n	8001bf8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3740      	adds	r7, #64	; 0x40
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc8:	b09f      	sub	sp, #124	; 0x7c
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cda:	68d9      	ldr	r1, [r3, #12]
 8001cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	ea40 0301 	orr.w	r3, r0, r1
 8001ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d08:	f021 010c 	bic.w	r1, r1, #12
 8001d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d12:	430b      	orrs	r3, r1
 8001d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d22:	6999      	ldr	r1, [r3, #24]
 8001d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	ea40 0301 	orr.w	r3, r0, r1
 8001d2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4bc5      	ldr	r3, [pc, #788]	; (8002048 <UART_SetConfig+0x384>)
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d004      	beq.n	8001d42 <UART_SetConfig+0x7e>
 8001d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4bc3      	ldr	r3, [pc, #780]	; (800204c <UART_SetConfig+0x388>)
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d103      	bne.n	8001d4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d42:	f7ff fe5d 	bl	8001a00 <HAL_RCC_GetPCLK2Freq>
 8001d46:	6778      	str	r0, [r7, #116]	; 0x74
 8001d48:	e002      	b.n	8001d50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d4a:	f7ff fe45 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8001d4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d58:	f040 80b6 	bne.w	8001ec8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5e:	461c      	mov	r4, r3
 8001d60:	f04f 0500 	mov.w	r5, #0
 8001d64:	4622      	mov	r2, r4
 8001d66:	462b      	mov	r3, r5
 8001d68:	1891      	adds	r1, r2, r2
 8001d6a:	6439      	str	r1, [r7, #64]	; 0x40
 8001d6c:	415b      	adcs	r3, r3
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d74:	1912      	adds	r2, r2, r4
 8001d76:	eb45 0303 	adc.w	r3, r5, r3
 8001d7a:	f04f 0000 	mov.w	r0, #0
 8001d7e:	f04f 0100 	mov.w	r1, #0
 8001d82:	00d9      	lsls	r1, r3, #3
 8001d84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d88:	00d0      	lsls	r0, r2, #3
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	1911      	adds	r1, r2, r4
 8001d90:	6639      	str	r1, [r7, #96]	; 0x60
 8001d92:	416b      	adcs	r3, r5
 8001d94:	667b      	str	r3, [r7, #100]	; 0x64
 8001d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	1891      	adds	r1, r2, r2
 8001da2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001da4:	415b      	adcs	r3, r3
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001dac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001db0:	f7fe fa66 	bl	8000280 <__aeabi_uldivmod>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4ba5      	ldr	r3, [pc, #660]	; (8002050 <UART_SetConfig+0x38c>)
 8001dba:	fba3 2302 	umull	r2, r3, r3, r2
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	011e      	lsls	r6, r3, #4
 8001dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc4:	461c      	mov	r4, r3
 8001dc6:	f04f 0500 	mov.w	r5, #0
 8001dca:	4622      	mov	r2, r4
 8001dcc:	462b      	mov	r3, r5
 8001dce:	1891      	adds	r1, r2, r2
 8001dd0:	6339      	str	r1, [r7, #48]	; 0x30
 8001dd2:	415b      	adcs	r3, r3
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dda:	1912      	adds	r2, r2, r4
 8001ddc:	eb45 0303 	adc.w	r3, r5, r3
 8001de0:	f04f 0000 	mov.w	r0, #0
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	00d9      	lsls	r1, r3, #3
 8001dea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dee:	00d0      	lsls	r0, r2, #3
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	1911      	adds	r1, r2, r4
 8001df6:	65b9      	str	r1, [r7, #88]	; 0x58
 8001df8:	416b      	adcs	r3, r5
 8001dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	1891      	adds	r1, r2, r2
 8001e08:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e0a:	415b      	adcs	r3, r3
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e16:	f7fe fa33 	bl	8000280 <__aeabi_uldivmod>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <UART_SetConfig+0x38c>)
 8001e20:	fba3 1302 	umull	r1, r3, r3, r2
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	2164      	movs	r1, #100	; 0x64
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	3332      	adds	r3, #50	; 0x32
 8001e32:	4a87      	ldr	r2, [pc, #540]	; (8002050 <UART_SetConfig+0x38c>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e40:	441e      	add	r6, r3
 8001e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e44:	4618      	mov	r0, r3
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	1894      	adds	r4, r2, r2
 8001e50:	623c      	str	r4, [r7, #32]
 8001e52:	415b      	adcs	r3, r3
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
 8001e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e5a:	1812      	adds	r2, r2, r0
 8001e5c:	eb41 0303 	adc.w	r3, r1, r3
 8001e60:	f04f 0400 	mov.w	r4, #0
 8001e64:	f04f 0500 	mov.w	r5, #0
 8001e68:	00dd      	lsls	r5, r3, #3
 8001e6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e6e:	00d4      	lsls	r4, r2, #3
 8001e70:	4622      	mov	r2, r4
 8001e72:	462b      	mov	r3, r5
 8001e74:	1814      	adds	r4, r2, r0
 8001e76:	653c      	str	r4, [r7, #80]	; 0x50
 8001e78:	414b      	adcs	r3, r1
 8001e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8001e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	461a      	mov	r2, r3
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	1891      	adds	r1, r2, r2
 8001e88:	61b9      	str	r1, [r7, #24]
 8001e8a:	415b      	adcs	r3, r3
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e96:	f7fe f9f3 	bl	8000280 <__aeabi_uldivmod>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <UART_SetConfig+0x38c>)
 8001ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea4:	095b      	lsrs	r3, r3, #5
 8001ea6:	2164      	movs	r1, #100	; 0x64
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	3332      	adds	r3, #50	; 0x32
 8001eb2:	4a67      	ldr	r2, [pc, #412]	; (8002050 <UART_SetConfig+0x38c>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	f003 0207 	and.w	r2, r3, #7
 8001ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4432      	add	r2, r6
 8001ec4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ec6:	e0b9      	b.n	800203c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eca:	461c      	mov	r4, r3
 8001ecc:	f04f 0500 	mov.w	r5, #0
 8001ed0:	4622      	mov	r2, r4
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	1891      	adds	r1, r2, r2
 8001ed6:	6139      	str	r1, [r7, #16]
 8001ed8:	415b      	adcs	r3, r3
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ee0:	1912      	adds	r2, r2, r4
 8001ee2:	eb45 0303 	adc.w	r3, r5, r3
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	00d9      	lsls	r1, r3, #3
 8001ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ef4:	00d0      	lsls	r0, r2, #3
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	eb12 0804 	adds.w	r8, r2, r4
 8001efe:	eb43 0905 	adc.w	r9, r3, r5
 8001f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	008b      	lsls	r3, r1, #2
 8001f16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f1a:	0082      	lsls	r2, r0, #2
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	4649      	mov	r1, r9
 8001f20:	f7fe f9ae 	bl	8000280 <__aeabi_uldivmod>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4b49      	ldr	r3, [pc, #292]	; (8002050 <UART_SetConfig+0x38c>)
 8001f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	011e      	lsls	r6, r3, #4
 8001f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f34:	4618      	mov	r0, r3
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	1894      	adds	r4, r2, r2
 8001f40:	60bc      	str	r4, [r7, #8]
 8001f42:	415b      	adcs	r3, r3
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f4a:	1812      	adds	r2, r2, r0
 8001f4c:	eb41 0303 	adc.w	r3, r1, r3
 8001f50:	f04f 0400 	mov.w	r4, #0
 8001f54:	f04f 0500 	mov.w	r5, #0
 8001f58:	00dd      	lsls	r5, r3, #3
 8001f5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f5e:	00d4      	lsls	r4, r2, #3
 8001f60:	4622      	mov	r2, r4
 8001f62:	462b      	mov	r3, r5
 8001f64:	1814      	adds	r4, r2, r0
 8001f66:	64bc      	str	r4, [r7, #72]	; 0x48
 8001f68:	414b      	adcs	r3, r1
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	008b      	lsls	r3, r1, #2
 8001f80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f84:	0082      	lsls	r2, r0, #2
 8001f86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f8a:	f7fe f979 	bl	8000280 <__aeabi_uldivmod>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <UART_SetConfig+0x38c>)
 8001f94:	fba3 1302 	umull	r1, r3, r3, r2
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	2164      	movs	r1, #100	; 0x64
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	3332      	adds	r3, #50	; 0x32
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <UART_SetConfig+0x38c>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb2:	441e      	add	r6, r3
 8001fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	1894      	adds	r4, r2, r2
 8001fc2:	603c      	str	r4, [r7, #0]
 8001fc4:	415b      	adcs	r3, r3
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fcc:	1812      	adds	r2, r2, r0
 8001fce:	eb41 0303 	adc.w	r3, r1, r3
 8001fd2:	f04f 0400 	mov.w	r4, #0
 8001fd6:	f04f 0500 	mov.w	r5, #0
 8001fda:	00dd      	lsls	r5, r3, #3
 8001fdc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001fe0:	00d4      	lsls	r4, r2, #3
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	462b      	mov	r3, r5
 8001fe6:	eb12 0a00 	adds.w	sl, r2, r0
 8001fea:	eb43 0b01 	adc.w	fp, r3, r1
 8001fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f04f 0100 	mov.w	r1, #0
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	008b      	lsls	r3, r1, #2
 8002002:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002006:	0082      	lsls	r2, r0, #2
 8002008:	4650      	mov	r0, sl
 800200a:	4659      	mov	r1, fp
 800200c:	f7fe f938 	bl	8000280 <__aeabi_uldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <UART_SetConfig+0x38c>)
 8002016:	fba3 1302 	umull	r1, r3, r3, r2
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2164      	movs	r1, #100	; 0x64
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	3332      	adds	r3, #50	; 0x32
 8002028:	4a09      	ldr	r2, [pc, #36]	; (8002050 <UART_SetConfig+0x38c>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	f003 020f 	and.w	r2, r3, #15
 8002034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4432      	add	r2, r6
 800203a:	609a      	str	r2, [r3, #8]
}
 800203c:	bf00      	nop
 800203e:	377c      	adds	r7, #124	; 0x7c
 8002040:	46bd      	mov	sp, r7
 8002042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002046:	bf00      	nop
 8002048:	40011000 	.word	0x40011000
 800204c:	40011400 	.word	0x40011400
 8002050:	51eb851f 	.word	0x51eb851f

08002054 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f103 0208 	add.w	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f103 0208 	add.w	r2, r3, #8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f103 0208 	add.w	r2, r3, #8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d103      	bne.n	8002116 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e00c      	b.n	8002130 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3308      	adds	r3, #8
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e002      	b.n	8002124 <vListInsert+0x2e>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	d2f6      	bcs.n	800211e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6892      	ldr	r2, [r2, #8]
 800217e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6852      	ldr	r2, [r2, #4]
 8002188:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d103      	bne.n	800219c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021e2:	bf00      	nop
 80021e4:	e7fe      	b.n	80021e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021e6:	f001 fb95 	bl	8003914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	68f9      	ldr	r1, [r7, #12]
 80021f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	441a      	add	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	3b01      	subs	r3, #1
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	441a      	add	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	22ff      	movs	r2, #255	; 0xff
 800222a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	22ff      	movs	r2, #255	; 0xff
 8002232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d114      	bne.n	8002266 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01a      	beq.n	800227a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3310      	adds	r3, #16
 8002248:	4618      	mov	r0, r3
 800224a:	f000 ff71 	bl	8003130 <xTaskRemoveFromEventList>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d012      	beq.n	800227a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <xQueueGenericReset+0xcc>)
 8002256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	e009      	b.n	800227a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3310      	adds	r3, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fef2 	bl	8002054 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3324      	adds	r3, #36	; 0x24
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff feed 	bl	8002054 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800227a:	f001 fb7b 	bl	8003974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	4613      	mov	r3, r2
 8002298:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	613b      	str	r3, [r7, #16]
}
 80022b2:	bf00      	nop
 80022b4:	e7fe      	b.n	80022b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3348      	adds	r3, #72	; 0x48
 80022c4:	4618      	mov	r0, r3
 80022c6:	f001 fc07 	bl	8003ad8 <pvPortMalloc>
 80022ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d011      	beq.n	80022f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3348      	adds	r3, #72	; 0x48
 80022da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022e4:	79fa      	ldrb	r2, [r7, #7]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4613      	mov	r3, r2
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f805 	bl	8002300 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80022f6:	69bb      	ldr	r3, [r7, #24]
	}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	e002      	b.n	8002322 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800232e:	2101      	movs	r1, #1
 8002330:	69b8      	ldr	r0, [r7, #24]
 8002332:	f7ff ff43 	bl	80021bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08e      	sub	sp, #56	; 0x38
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800234e:	2300      	movs	r3, #0
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <xQueueGenericSend+0x32>
	__asm volatile
 800235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002360:	f383 8811 	msr	BASEPRI, r3
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800236e:	bf00      	nop
 8002370:	e7fe      	b.n	8002370 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <xQueueGenericSend+0x40>
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <xQueueGenericSend+0x44>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <xQueueGenericSend+0x46>
 8002384:	2300      	movs	r3, #0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <xQueueGenericSend+0x60>
	__asm volatile
 800238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800239c:	bf00      	nop
 800239e:	e7fe      	b.n	800239e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d103      	bne.n	80023ae <xQueueGenericSend+0x6e>
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <xQueueGenericSend+0x72>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <xQueueGenericSend+0x74>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <xQueueGenericSend+0x8e>
	__asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	623b      	str	r3, [r7, #32]
}
 80023ca:	bf00      	nop
 80023cc:	e7fe      	b.n	80023cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023ce:	f001 f86b 	bl	80034a8 <xTaskGetSchedulerState>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <xQueueGenericSend+0x9e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <xQueueGenericSend+0xa2>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <xQueueGenericSend+0xa4>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <xQueueGenericSend+0xbe>
	__asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	61fb      	str	r3, [r7, #28]
}
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023fe:	f001 fa89 	bl	8003914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <xQueueGenericSend+0xd4>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d129      	bne.n	8002468 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800241a:	f000 f96f 	bl	80026fc <prvCopyDataToQueue>
 800241e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	2b00      	cmp	r3, #0
 8002426:	d010      	beq.n	800244a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	3324      	adds	r3, #36	; 0x24
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fe7f 	bl	8003130 <xTaskRemoveFromEventList>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002438:	4b3f      	ldr	r3, [pc, #252]	; (8002538 <xQueueGenericSend+0x1f8>)
 800243a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	e00a      	b.n	8002460 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002450:	4b39      	ldr	r3, [pc, #228]	; (8002538 <xQueueGenericSend+0x1f8>)
 8002452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002460:	f001 fa88 	bl	8003974 <vPortExitCritical>
				return pdPASS;
 8002464:	2301      	movs	r3, #1
 8002466:	e063      	b.n	8002530 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800246e:	f001 fa81 	bl	8003974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002472:	2300      	movs	r3, #0
 8002474:	e05c      	b.n	8002530 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	4618      	mov	r0, r3
 8002482:	f000 feb7 	bl	80031f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002486:	2301      	movs	r3, #1
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800248a:	f001 fa73 	bl	8003974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800248e:	f000 fc6d 	bl	8002d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002492:	f001 fa3f 	bl	8003914 <vPortEnterCritical>
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800249c:	b25b      	sxtb	r3, r3
 800249e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a2:	d103      	bne.n	80024ac <xQueueGenericSend+0x16c>
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d103      	bne.n	80024c2 <xQueueGenericSend+0x182>
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024c2:	f001 fa57 	bl	8003974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024c6:	1d3a      	adds	r2, r7, #4
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fea6 	bl	8003220 <xTaskCheckForTimeOut>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d124      	bne.n	8002524 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80024da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024dc:	f000 fa06 	bl	80028ec <prvIsQueueFull>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d018      	beq.n	8002518 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	3310      	adds	r3, #16
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fdfa 	bl	80030e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80024f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024f6:	f000 f991 	bl	800281c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80024fa:	f000 fc45 	bl	8002d88 <xTaskResumeAll>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	f47f af7c 	bne.w	80023fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <xQueueGenericSend+0x1f8>)
 8002508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	f3bf 8f6f 	isb	sy
 8002516:	e772      	b.n	80023fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800251a:	f000 f97f 	bl	800281c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800251e:	f000 fc33 	bl	8002d88 <xTaskResumeAll>
 8002522:	e76c      	b.n	80023fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002526:	f000 f979 	bl	800281c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800252a:	f000 fc2d 	bl	8002d88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800252e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002530:	4618      	mov	r0, r3
 8002532:	3738      	adds	r7, #56	; 0x38
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10a      	bne.n	800256c <xQueueReceive+0x30>
	__asm volatile
 8002556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255a:	f383 8811 	msr	BASEPRI, r3
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	f3bf 8f4f 	dsb	sy
 8002566:	623b      	str	r3, [r7, #32]
}
 8002568:	bf00      	nop
 800256a:	e7fe      	b.n	800256a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d103      	bne.n	800257a <xQueueReceive+0x3e>
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <xQueueReceive+0x42>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <xQueueReceive+0x44>
 800257e:	2300      	movs	r3, #0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <xQueueReceive+0x5e>
	__asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	61fb      	str	r3, [r7, #28]
}
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800259a:	f000 ff85 	bl	80034a8 <xTaskGetSchedulerState>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d102      	bne.n	80025aa <xQueueReceive+0x6e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <xQueueReceive+0x72>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <xQueueReceive+0x74>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <xQueueReceive+0x8e>
	__asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	f383 8811 	msr	BASEPRI, r3
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	61bb      	str	r3, [r7, #24]
}
 80025c6:	bf00      	nop
 80025c8:	e7fe      	b.n	80025c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025ca:	f001 f9a3 	bl	8003914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01f      	beq.n	800261a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025de:	f000 f8f7 	bl	80027d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00f      	beq.n	8002612 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	3310      	adds	r3, #16
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fd9a 	bl	8003130 <xTaskRemoveFromEventList>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <xQueueReceive+0x1bc>)
 8002604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002612:	f001 f9af 	bl	8003974 <vPortExitCritical>
				return pdPASS;
 8002616:	2301      	movs	r3, #1
 8002618:	e069      	b.n	80026ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d103      	bne.n	8002628 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002620:	f001 f9a8 	bl	8003974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002624:	2300      	movs	r3, #0
 8002626:	e062      	b.n	80026ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800262e:	f107 0310 	add.w	r3, r7, #16
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fdde 	bl	80031f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002638:	2301      	movs	r3, #1
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800263c:	f001 f99a 	bl	8003974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002640:	f000 fb94 	bl	8002d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002644:	f001 f966 	bl	8003914 <vPortEnterCritical>
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800264e:	b25b      	sxtb	r3, r3
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d103      	bne.n	800265e <xQueueReceive+0x122>
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002664:	b25b      	sxtb	r3, r3
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d103      	bne.n	8002674 <xQueueReceive+0x138>
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002674:	f001 f97e 	bl	8003974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002678:	1d3a      	adds	r2, r7, #4
 800267a:	f107 0310 	add.w	r3, r7, #16
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fdcd 	bl	8003220 <xTaskCheckForTimeOut>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d123      	bne.n	80026d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800268c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800268e:	f000 f917 	bl	80028c0 <prvIsQueueEmpty>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d017      	beq.n	80026c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	3324      	adds	r3, #36	; 0x24
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fd21 	bl	80030e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026a8:	f000 f8b8 	bl	800281c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026ac:	f000 fb6c 	bl	8002d88 <xTaskResumeAll>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d189      	bne.n	80025ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <xQueueReceive+0x1bc>)
 80026b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	e780      	b.n	80025ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80026c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ca:	f000 f8a7 	bl	800281c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026ce:	f000 fb5b 	bl	8002d88 <xTaskResumeAll>
 80026d2:	e77a      	b.n	80025ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80026d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026d6:	f000 f8a1 	bl	800281c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026da:	f000 fb55 	bl	8002d88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026e0:	f000 f8ee 	bl	80028c0 <prvIsQueueEmpty>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f43f af6f 	beq.w	80025ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80026ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3730      	adds	r7, #48	; 0x30
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10d      	bne.n	8002736 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d14d      	bne.n	80027be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fedc 	bl	80034e4 <xTaskPriorityDisinherit>
 800272c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	e043      	b.n	80027be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d119      	bne.n	8002770 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6858      	ldr	r0, [r3, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	461a      	mov	r2, r3
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	f001 fbda 	bl	8003f00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	441a      	add	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	d32b      	bcc.n	80027be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	e026      	b.n	80027be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68d8      	ldr	r0, [r3, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	461a      	mov	r2, r3
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	f001 fbc0 	bl	8003f00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	425b      	negs	r3, r3
 800278a:	441a      	add	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d207      	bcs.n	80027ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	425b      	negs	r3, r3
 80027a6:	441a      	add	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d105      	bne.n	80027be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80027c6:	697b      	ldr	r3, [r7, #20]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d018      	beq.n	8002814 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	441a      	add	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d303      	bcc.n	8002804 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68d9      	ldr	r1, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	461a      	mov	r2, r3
 800280e:	6838      	ldr	r0, [r7, #0]
 8002810:	f001 fb76 	bl	8003f00 <memcpy>
	}
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002824:	f001 f876 	bl	8003914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800282e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002830:	e011      	b.n	8002856 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3324      	adds	r3, #36	; 0x24
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fc76 	bl	8003130 <xTaskRemoveFromEventList>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800284a:	f000 fd4b 	bl	80032e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	3b01      	subs	r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	dce9      	bgt.n	8002832 <prvUnlockQueue+0x16>
 800285e:	e000      	b.n	8002862 <prvUnlockQueue+0x46>
					break;
 8002860:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	22ff      	movs	r2, #255	; 0xff
 8002866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800286a:	f001 f883 	bl	8003974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800286e:	f001 f851 	bl	8003914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002878:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800287a:	e011      	b.n	80028a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3310      	adds	r3, #16
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fc51 	bl	8003130 <xTaskRemoveFromEventList>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002894:	f000 fd26 	bl	80032e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002898:	7bbb      	ldrb	r3, [r7, #14]
 800289a:	3b01      	subs	r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	dce9      	bgt.n	800287c <prvUnlockQueue+0x60>
 80028a8:	e000      	b.n	80028ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80028b4:	f001 f85e 	bl	8003974 <vPortExitCritical>
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028c8:	f001 f824 	bl	8003914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e001      	b.n	80028de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028de:	f001 f849 	bl	8003974 <vPortExitCritical>

	return xReturn;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028f4:	f001 f80e 	bl	8003914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	429a      	cmp	r2, r3
 8002902:	d102      	bne.n	800290a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002904:	2301      	movs	r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e001      	b.n	800290e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800290e:	f001 f831 	bl	8003974 <vPortExitCritical>

	return xReturn;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	; 0x38
 8002920:	af04      	add	r7, sp, #16
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	623b      	str	r3, [r7, #32]
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <xTaskCreateStatic+0x46>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	61fb      	str	r3, [r7, #28]
}
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002962:	2354      	movs	r3, #84	; 0x54
 8002964:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b54      	cmp	r3, #84	; 0x54
 800296a:	d00a      	beq.n	8002982 <xTaskCreateStatic+0x66>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	61bb      	str	r3, [r7, #24]
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002982:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01e      	beq.n	80029c8 <xTaskCreateStatic+0xac>
 800298a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01b      	beq.n	80029c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002998:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029a2:	2300      	movs	r3, #0
 80029a4:	9303      	str	r3, [sp, #12]
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	9302      	str	r3, [sp, #8]
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f850 	bl	8002a60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c2:	f000 f8d5 	bl	8002b70 <prvAddNewTaskToReadyList>
 80029c6:	e001      	b.n	80029cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029cc:	697b      	ldr	r3, [r7, #20]
	}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3728      	adds	r7, #40	; 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b08c      	sub	sp, #48	; 0x30
 80029da:	af04      	add	r7, sp, #16
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 f874 	bl	8003ad8 <pvPortMalloc>
 80029f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00e      	beq.n	8002a16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029f8:	2054      	movs	r0, #84	; 0x54
 80029fa:	f001 f86d 	bl	8003ad8 <pvPortMalloc>
 80029fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0c:	e005      	b.n	8002a1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f001 f92e 	bl	8003c70 <vPortFree>
 8002a14:	e001      	b.n	8002a1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d017      	beq.n	8002a50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9303      	str	r3, [sp, #12]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	9302      	str	r3, [sp, #8]
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f80e 	bl	8002a60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a44:	69f8      	ldr	r0, [r7, #28]
 8002a46:	f000 f893 	bl	8002b70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	e002      	b.n	8002a56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a56:	69bb      	ldr	r3, [r7, #24]
	}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f023 0307 	bic.w	r3, r3, #7
 8002a86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	617b      	str	r3, [r7, #20]
}
 8002aa4:	bf00      	nop
 8002aa6:	e7fe      	b.n	8002aa6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01f      	beq.n	8002aee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e012      	b.n	8002ada <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	7819      	ldrb	r1, [r3, #0]
 8002abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3334      	adds	r3, #52	; 0x34
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d9e9      	bls.n	8002ab4 <prvInitialiseNewTask+0x54>
 8002ae0:	e000      	b.n	8002ae4 <prvInitialiseNewTask+0x84>
			{
				break;
 8002ae2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aec:	e003      	b.n	8002af6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	2b06      	cmp	r3, #6
 8002afa:	d901      	bls.n	8002b00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002afc:	2306      	movs	r3, #6
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	2200      	movs	r2, #0
 8002b10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	3304      	adds	r3, #4
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fabc 	bl	8002094 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	3318      	adds	r3, #24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fab7 	bl	8002094 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	f1c3 0207 	rsb	r2, r3, #7
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	2200      	movs	r2, #0
 8002b40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	69b8      	ldr	r0, [r7, #24]
 8002b50:	f000 fdb4 	bl	80036bc <pxPortInitialiseStack>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b66:	bf00      	nop
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b78:	f000 fecc 	bl	8003914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b7c:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <prvAddNewTaskToReadyList+0xb8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <prvAddNewTaskToReadyList+0xb8>)
 8002b84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b86:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <prvAddNewTaskToReadyList+0xbc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b8e:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <prvAddNewTaskToReadyList+0xbc>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <prvAddNewTaskToReadyList+0xb8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d110      	bne.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b9c:	f000 fbc6 	bl	800332c <prvInitialiseTaskLists>
 8002ba0:	e00d      	b.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ba2:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <prvAddNewTaskToReadyList+0xc0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <prvAddNewTaskToReadyList+0xbc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d802      	bhi.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <prvAddNewTaskToReadyList+0xbc>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <prvAddNewTaskToReadyList+0xc4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <prvAddNewTaskToReadyList+0xc4>)
 8002bc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <prvAddNewTaskToReadyList+0xc8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <prvAddNewTaskToReadyList+0xc8>)
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <prvAddNewTaskToReadyList+0xcc>)
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f7ff fa5c 	bl	80020ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bf6:	f000 febd 	bl	8003974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <prvAddNewTaskToReadyList+0xc0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00e      	beq.n	8002c20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <prvAddNewTaskToReadyList+0xbc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d207      	bcs.n	8002c20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <prvAddNewTaskToReadyList+0xd0>)
 8002c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200003e8 	.word	0x200003e8
 8002c2c:	200002e8 	.word	0x200002e8
 8002c30:	200003f4 	.word	0x200003f4
 8002c34:	20000404 	.word	0x20000404
 8002c38:	200003f0 	.word	0x200003f0
 8002c3c:	200002ec 	.word	0x200002ec
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d017      	beq.n	8002c86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <vTaskDelay+0x60>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <vTaskDelay+0x30>
	__asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	60bb      	str	r3, [r7, #8]
}
 8002c70:	bf00      	nop
 8002c72:	e7fe      	b.n	8002c72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c74:	f000 f87a 	bl	8002d6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c78:	2100      	movs	r1, #0
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fcb8 	bl	80035f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c80:	f000 f882 	bl	8002d88 <xTaskResumeAll>
 8002c84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <vTaskDelay+0x64>)
 8002c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000410 	.word	0x20000410
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cba:	463a      	mov	r2, r7
 8002cbc:	1d39      	adds	r1, r7, #4
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc58 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	9202      	str	r2, [sp, #8]
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	460a      	mov	r2, r1
 8002cda:	491e      	ldr	r1, [pc, #120]	; (8002d54 <vTaskStartScheduler+0xa8>)
 8002cdc:	481e      	ldr	r0, [pc, #120]	; (8002d58 <vTaskStartScheduler+0xac>)
 8002cde:	f7ff fe1d 	bl	800291c <xTaskCreateStatic>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <vTaskStartScheduler+0xb0>)
 8002ce6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <vTaskStartScheduler+0xb0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e001      	b.n	8002cfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d116      	bne.n	8002d2e <vTaskStartScheduler+0x82>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	613b      	str	r3, [r7, #16]
}
 8002d12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <vTaskStartScheduler+0xb4>)
 8002d16:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <vTaskStartScheduler+0xb8>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <vTaskStartScheduler+0xbc>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d28:	f000 fd52 	bl	80037d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d2c:	e00e      	b.n	8002d4c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d10a      	bne.n	8002d4c <vTaskStartScheduler+0xa0>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	60fb      	str	r3, [r7, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <vTaskStartScheduler+0x9e>
}
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	0800496c 	.word	0x0800496c
 8002d58:	080032fd 	.word	0x080032fd
 8002d5c:	2000040c 	.word	0x2000040c
 8002d60:	20000408 	.word	0x20000408
 8002d64:	200003f4 	.word	0x200003f4
 8002d68:	200003ec 	.word	0x200003ec

08002d6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <vTaskSuspendAll+0x18>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a03      	ldr	r2, [pc, #12]	; (8002d84 <vTaskSuspendAll+0x18>)
 8002d78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	20000410 	.word	0x20000410

08002d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <xTaskResumeAll+0x114>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	603b      	str	r3, [r7, #0]
}
 8002db0:	bf00      	nop
 8002db2:	e7fe      	b.n	8002db2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002db4:	f000 fdae 	bl	8003914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002db8:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <xTaskResumeAll+0x114>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	4a37      	ldr	r2, [pc, #220]	; (8002e9c <xTaskResumeAll+0x114>)
 8002dc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <xTaskResumeAll+0x114>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d161      	bne.n	8002e8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dca:	4b35      	ldr	r3, [pc, #212]	; (8002ea0 <xTaskResumeAll+0x118>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d05d      	beq.n	8002e8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dd2:	e02e      	b.n	8002e32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dd4:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <xTaskResumeAll+0x11c>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3318      	adds	r3, #24
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f9c1 	bl	8002168 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f9bc 	bl	8002168 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	2201      	movs	r2, #1
 8002df6:	409a      	lsls	r2, r3
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <xTaskResumeAll+0x120>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	4a2a      	ldr	r2, [pc, #168]	; (8002ea8 <xTaskResumeAll+0x120>)
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4a27      	ldr	r2, [pc, #156]	; (8002eac <xTaskResumeAll+0x124>)
 8002e10:	441a      	add	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f7ff f948 	bl	80020ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e22:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <xTaskResumeAll+0x128>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d302      	bcc.n	8002e32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <xTaskResumeAll+0x12c>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <xTaskResumeAll+0x11c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1cc      	bne.n	8002dd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e40:	f000 fb12 	bl	8003468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e44:	4b1c      	ldr	r3, [pc, #112]	; (8002eb8 <xTaskResumeAll+0x130>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e50:	f000 f836 	bl	8002ec0 <xTaskIncrementTick>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <xTaskResumeAll+0x12c>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f1      	bne.n	8002e50 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <xTaskResumeAll+0x130>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <xTaskResumeAll+0x12c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <xTaskResumeAll+0x134>)
 8002e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e8e:	f000 fd71 	bl	8003974 <vPortExitCritical>

	return xAlreadyYielded;
 8002e92:	68bb      	ldr	r3, [r7, #8]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000410 	.word	0x20000410
 8002ea0:	200003e8 	.word	0x200003e8
 8002ea4:	200003a8 	.word	0x200003a8
 8002ea8:	200003f0 	.word	0x200003f0
 8002eac:	200002ec 	.word	0x200002ec
 8002eb0:	200002e8 	.word	0x200002e8
 8002eb4:	200003fc 	.word	0x200003fc
 8002eb8:	200003f8 	.word	0x200003f8
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eca:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <xTaskIncrementTick+0x144>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 808e 	bne.w	8002ff0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ed4:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <xTaskIncrementTick+0x148>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002edc:	4a4a      	ldr	r2, [pc, #296]	; (8003008 <xTaskIncrementTick+0x148>)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d120      	bne.n	8002f2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ee8:	4b48      	ldr	r3, [pc, #288]	; (800300c <xTaskIncrementTick+0x14c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <xTaskIncrementTick+0x48>
	__asm volatile
 8002ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	603b      	str	r3, [r7, #0]
}
 8002f04:	bf00      	nop
 8002f06:	e7fe      	b.n	8002f06 <xTaskIncrementTick+0x46>
 8002f08:	4b40      	ldr	r3, [pc, #256]	; (800300c <xTaskIncrementTick+0x14c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	4b40      	ldr	r3, [pc, #256]	; (8003010 <xTaskIncrementTick+0x150>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a3e      	ldr	r2, [pc, #248]	; (800300c <xTaskIncrementTick+0x14c>)
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4a3e      	ldr	r2, [pc, #248]	; (8003010 <xTaskIncrementTick+0x150>)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <xTaskIncrementTick+0x154>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a3c      	ldr	r2, [pc, #240]	; (8003014 <xTaskIncrementTick+0x154>)
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	f000 fa9f 	bl	8003468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <xTaskIncrementTick+0x158>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d348      	bcc.n	8002fc6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f34:	4b35      	ldr	r3, [pc, #212]	; (800300c <xTaskIncrementTick+0x14c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d104      	bne.n	8002f48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <xTaskIncrementTick+0x158>)
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	601a      	str	r2, [r3, #0]
					break;
 8002f46:	e03e      	b.n	8002fc6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f48:	4b30      	ldr	r3, [pc, #192]	; (800300c <xTaskIncrementTick+0x14c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d203      	bcs.n	8002f68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f60:	4a2d      	ldr	r2, [pc, #180]	; (8003018 <xTaskIncrementTick+0x158>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f66:	e02e      	b.n	8002fc6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f8fb 	bl	8002168 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3318      	adds	r3, #24
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff f8f2 	bl	8002168 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	4b23      	ldr	r3, [pc, #140]	; (800301c <xTaskIncrementTick+0x15c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	4a22      	ldr	r2, [pc, #136]	; (800301c <xTaskIncrementTick+0x15c>)
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <xTaskIncrementTick+0x160>)
 8002fa4:	441a      	add	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	f7ff f87e 	bl	80020ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <xTaskIncrementTick+0x164>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d3b9      	bcc.n	8002f34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fc4:	e7b6      	b.n	8002f34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fc6:	4b17      	ldr	r3, [pc, #92]	; (8003024 <xTaskIncrementTick+0x164>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	4914      	ldr	r1, [pc, #80]	; (8003020 <xTaskIncrementTick+0x160>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d901      	bls.n	8002fe2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <xTaskIncrementTick+0x168>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	e004      	b.n	8002ffa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	; (800302c <xTaskIncrementTick+0x16c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a0d      	ldr	r2, [pc, #52]	; (800302c <xTaskIncrementTick+0x16c>)
 8002ff8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002ffa:	697b      	ldr	r3, [r7, #20]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000410 	.word	0x20000410
 8003008:	200003ec 	.word	0x200003ec
 800300c:	200003a0 	.word	0x200003a0
 8003010:	200003a4 	.word	0x200003a4
 8003014:	20000400 	.word	0x20000400
 8003018:	20000408 	.word	0x20000408
 800301c:	200003f0 	.word	0x200003f0
 8003020:	200002ec 	.word	0x200002ec
 8003024:	200002e8 	.word	0x200002e8
 8003028:	200003fc 	.word	0x200003fc
 800302c:	200003f8 	.word	0x200003f8

08003030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003036:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <vTaskSwitchContext+0xa4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <vTaskSwitchContext+0xa8>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003044:	e03f      	b.n	80030c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <vTaskSwitchContext+0xa8>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <vTaskSwitchContext+0xac>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800305a:	7afb      	ldrb	r3, [r7, #11]
 800305c:	f1c3 031f 	rsb	r3, r3, #31
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	491f      	ldr	r1, [pc, #124]	; (80030e0 <vTaskSwitchContext+0xb0>)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	607b      	str	r3, [r7, #4]
}
 8003088:	bf00      	nop
 800308a:	e7fe      	b.n	800308a <vTaskSwitchContext+0x5a>
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <vTaskSwitchContext+0xb0>)
 8003098:	4413      	add	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	3308      	adds	r3, #8
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d104      	bne.n	80030bc <vTaskSwitchContext+0x8c>
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <vTaskSwitchContext+0xb4>)
 80030c4:	6013      	str	r3, [r2, #0]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000410 	.word	0x20000410
 80030d8:	200003fc 	.word	0x200003fc
 80030dc:	200003f0 	.word	0x200003f0
 80030e0:	200002ec 	.word	0x200002ec
 80030e4:	200002e8 	.word	0x200002e8

080030e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	60fb      	str	r3, [r7, #12]
}
 800310a:	bf00      	nop
 800310c:	e7fe      	b.n	800310c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <vTaskPlaceOnEventList+0x44>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3318      	adds	r3, #24
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe ffed 	bl	80020f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800311c:	2101      	movs	r1, #1
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	f000 fa66 	bl	80035f0 <prvAddCurrentTaskToDelayedList>
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200002e8 	.word	0x200002e8

08003130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	60fb      	str	r3, [r7, #12]
}
 8003158:	bf00      	nop
 800315a:	e7fe      	b.n	800315a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	3318      	adds	r3, #24
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff f801 	bl	8002168 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <xTaskRemoveFromEventList+0xac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d11c      	bne.n	80031a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	3304      	adds	r3, #4
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fff8 	bl	8002168 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	2201      	movs	r2, #1
 800317e:	409a      	lsls	r2, r3
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <xTaskRemoveFromEventList+0xb0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4313      	orrs	r3, r2
 8003186:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <xTaskRemoveFromEventList+0xb0>)
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <xTaskRemoveFromEventList+0xb4>)
 8003198:	441a      	add	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3304      	adds	r3, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7fe ff84 	bl	80020ae <vListInsertEnd>
 80031a6:	e005      	b.n	80031b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	3318      	adds	r3, #24
 80031ac:	4619      	mov	r1, r3
 80031ae:	480e      	ldr	r0, [pc, #56]	; (80031e8 <xTaskRemoveFromEventList+0xb8>)
 80031b0:	f7fe ff7d 	bl	80020ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <xTaskRemoveFromEventList+0xbc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	429a      	cmp	r2, r3
 80031c0:	d905      	bls.n	80031ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80031c2:	2301      	movs	r3, #1
 80031c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <xTaskRemoveFromEventList+0xc0>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e001      	b.n	80031d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80031d2:	697b      	ldr	r3, [r7, #20]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000410 	.word	0x20000410
 80031e0:	200003f0 	.word	0x200003f0
 80031e4:	200002ec 	.word	0x200002ec
 80031e8:	200003a8 	.word	0x200003a8
 80031ec:	200002e8 	.word	0x200002e8
 80031f0:	200003fc 	.word	0x200003fc

080031f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <vTaskInternalSetTimeOutState+0x24>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <vTaskInternalSetTimeOutState+0x28>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	605a      	str	r2, [r3, #4]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	20000400 	.word	0x20000400
 800321c:	200003ec 	.word	0x200003ec

08003220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	613b      	str	r3, [r7, #16]
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	60fb      	str	r3, [r7, #12]
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003262:	f000 fb57 	bl	8003914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <xTaskCheckForTimeOut+0xbc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d102      	bne.n	8003286 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	e023      	b.n	80032ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <xTaskCheckForTimeOut+0xc0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d007      	beq.n	80032a2 <xTaskCheckForTimeOut+0x82>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	429a      	cmp	r2, r3
 800329a:	d302      	bcc.n	80032a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800329c:	2301      	movs	r3, #1
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e015      	b.n	80032ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d20b      	bcs.n	80032c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	1ad2      	subs	r2, r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff9b 	bl	80031f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	e004      	b.n	80032ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032ce:	f000 fb51 	bl	8003974 <vPortExitCritical>

	return xReturn;
 80032d2:	69fb      	ldr	r3, [r7, #28]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	200003ec 	.word	0x200003ec
 80032e0:	20000400 	.word	0x20000400

080032e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <vTaskMissedYield+0x14>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	200003fc 	.word	0x200003fc

080032fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003304:	f000 f852 	bl	80033ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <prvIdleTask+0x28>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d9f9      	bls.n	8003304 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <prvIdleTask+0x2c>)
 8003312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003320:	e7f0      	b.n	8003304 <prvIdleTask+0x8>
 8003322:	bf00      	nop
 8003324:	200002ec 	.word	0x200002ec
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	e00c      	b.n	8003352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <prvInitialiseTaskLists+0x60>)
 8003344:	4413      	add	r3, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fe84 	bl	8002054 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3301      	adds	r3, #1
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b06      	cmp	r3, #6
 8003356:	d9ef      	bls.n	8003338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003358:	480d      	ldr	r0, [pc, #52]	; (8003390 <prvInitialiseTaskLists+0x64>)
 800335a:	f7fe fe7b 	bl	8002054 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800335e:	480d      	ldr	r0, [pc, #52]	; (8003394 <prvInitialiseTaskLists+0x68>)
 8003360:	f7fe fe78 	bl	8002054 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003364:	480c      	ldr	r0, [pc, #48]	; (8003398 <prvInitialiseTaskLists+0x6c>)
 8003366:	f7fe fe75 	bl	8002054 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800336a:	480c      	ldr	r0, [pc, #48]	; (800339c <prvInitialiseTaskLists+0x70>)
 800336c:	f7fe fe72 	bl	8002054 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003370:	480b      	ldr	r0, [pc, #44]	; (80033a0 <prvInitialiseTaskLists+0x74>)
 8003372:	f7fe fe6f 	bl	8002054 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <prvInitialiseTaskLists+0x78>)
 8003378:	4a05      	ldr	r2, [pc, #20]	; (8003390 <prvInitialiseTaskLists+0x64>)
 800337a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <prvInitialiseTaskLists+0x7c>)
 800337e:	4a05      	ldr	r2, [pc, #20]	; (8003394 <prvInitialiseTaskLists+0x68>)
 8003380:	601a      	str	r2, [r3, #0]
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200002ec 	.word	0x200002ec
 8003390:	20000378 	.word	0x20000378
 8003394:	2000038c 	.word	0x2000038c
 8003398:	200003a8 	.word	0x200003a8
 800339c:	200003bc 	.word	0x200003bc
 80033a0:	200003d4 	.word	0x200003d4
 80033a4:	200003a0 	.word	0x200003a0
 80033a8:	200003a4 	.word	0x200003a4

080033ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033b2:	e019      	b.n	80033e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033b4:	f000 faae 	bl	8003914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <prvCheckTasksWaitingTermination+0x50>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe fecf 	bl	8002168 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <prvCheckTasksWaitingTermination+0x54>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <prvCheckTasksWaitingTermination+0x54>)
 80033d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <prvCheckTasksWaitingTermination+0x58>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3b01      	subs	r3, #1
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <prvCheckTasksWaitingTermination+0x58>)
 80033dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033de:	f000 fac9 	bl	8003974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f810 	bl	8003408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <prvCheckTasksWaitingTermination+0x58>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e1      	bne.n	80033b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200003bc 	.word	0x200003bc
 8003400:	200003e8 	.word	0x200003e8
 8003404:	200003d0 	.word	0x200003d0

08003408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fc26 	bl	8003c70 <vPortFree>
				vPortFree( pxTCB );
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fc23 	bl	8003c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800342a:	e018      	b.n	800345e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003432:	2b01      	cmp	r3, #1
 8003434:	d103      	bne.n	800343e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fc1a 	bl	8003c70 <vPortFree>
	}
 800343c:	e00f      	b.n	800345e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003444:	2b02      	cmp	r3, #2
 8003446:	d00a      	beq.n	800345e <prvDeleteTCB+0x56>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	60fb      	str	r3, [r7, #12]
}
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <prvDeleteTCB+0x54>
	}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <prvResetNextTaskUnblockTime+0x38>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <prvResetNextTaskUnblockTime+0x3c>)
 800347a:	f04f 32ff 	mov.w	r2, #4294967295
 800347e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003480:	e008      	b.n	8003494 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <prvResetNextTaskUnblockTime+0x38>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <prvResetNextTaskUnblockTime+0x3c>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	200003a0 	.word	0x200003a0
 80034a4:	20000408 	.word	0x20000408

080034a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <xTaskGetSchedulerState+0x34>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034b6:	2301      	movs	r3, #1
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	e008      	b.n	80034ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <xTaskGetSchedulerState+0x38>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034c4:	2302      	movs	r3, #2
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	e001      	b.n	80034ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034ce:	687b      	ldr	r3, [r7, #4]
	}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	200003f4 	.word	0x200003f4
 80034e0:	20000410 	.word	0x20000410

080034e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d06e      	beq.n	80035d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80034fa:	4b3a      	ldr	r3, [pc, #232]	; (80035e4 <xTaskPriorityDisinherit+0x100>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	429a      	cmp	r2, r3
 8003502:	d00a      	beq.n	800351a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	60fb      	str	r3, [r7, #12]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	60bb      	str	r3, [r7, #8]
}
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353c:	1e5a      	subs	r2, r3, #1
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	429a      	cmp	r2, r3
 800354c:	d044      	beq.n	80035d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003552:	2b00      	cmp	r3, #0
 8003554:	d140      	bne.n	80035d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3304      	adds	r3, #4
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fe04 	bl	8002168 <uxListRemove>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d115      	bne.n	8003592 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	491f      	ldr	r1, [pc, #124]	; (80035e8 <xTaskPriorityDisinherit+0x104>)
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <xTaskPriorityDisinherit+0xae>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	2201      	movs	r2, #1
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43da      	mvns	r2, r3
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <xTaskPriorityDisinherit+0x108>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4013      	ands	r3, r2
 800358e:	4a17      	ldr	r2, [pc, #92]	; (80035ec <xTaskPriorityDisinherit+0x108>)
 8003590:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	f1c3 0207 	rsb	r2, r3, #7
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	2201      	movs	r2, #1
 80035ac:	409a      	lsls	r2, r3
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <xTaskPriorityDisinherit+0x108>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <xTaskPriorityDisinherit+0x108>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <xTaskPriorityDisinherit+0x104>)
 80035c6:	441a      	add	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f7fe fd6d 	bl	80020ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035d8:	697b      	ldr	r3, [r7, #20]
	}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200002e8 	.word	0x200002e8
 80035e8:	200002ec 	.word	0x200002ec
 80035ec:	200003f0 	.word	0x200003f0

080035f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003600:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3304      	adds	r3, #4
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fdae 	bl	8002168 <uxListRemove>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10b      	bne.n	800362a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	2201      	movs	r2, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4013      	ands	r3, r2
 8003626:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003628:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d10a      	bne.n	8003648 <prvAddCurrentTaskToDelayedList+0x58>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3304      	adds	r3, #4
 800363e:	4619      	mov	r1, r3
 8003640:	481a      	ldr	r0, [pc, #104]	; (80036ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8003642:	f7fe fd34 	bl	80020ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003646:	e026      	b.n	8003696 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	429a      	cmp	r2, r3
 800365e:	d209      	bcs.n	8003674 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003660:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3304      	adds	r3, #4
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f7fe fd42 	bl	80020f6 <vListInsert>
}
 8003672:	e010      	b.n	8003696 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7fe fd38 	bl	80020f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d202      	bcs.n	8003696 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003690:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200003ec 	.word	0x200003ec
 80036a4:	200002e8 	.word	0x200002e8
 80036a8:	200003f0 	.word	0x200003f0
 80036ac:	200003d4 	.word	0x200003d4
 80036b0:	200003a4 	.word	0x200003a4
 80036b4:	200003a0 	.word	0x200003a0
 80036b8:	20000408 	.word	0x20000408

080036bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3b04      	subs	r3, #4
 80036cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3b04      	subs	r3, #4
 80036da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3b04      	subs	r3, #4
 80036ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80036ec:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <pxPortInitialiseStack+0x64>)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b14      	subs	r3, #20
 80036f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3b04      	subs	r3, #4
 8003702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f06f 0202 	mvn.w	r2, #2
 800370a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3b20      	subs	r3, #32
 8003710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	08003725 	.word	0x08003725

08003724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <prvTaskExitError+0x54>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d00a      	beq.n	800374e <prvTaskExitError+0x2a>
	__asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	60fb      	str	r3, [r7, #12]
}
 800374a:	bf00      	nop
 800374c:	e7fe      	b.n	800374c <prvTaskExitError+0x28>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	60bb      	str	r3, [r7, #8]
}
 8003760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003762:	bf00      	nop
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0fc      	beq.n	8003764 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	2000000c 	.word	0x2000000c
 800377c:	00000000 	.word	0x00000000

08003780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <pxCurrentTCBConst2>)
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	6808      	ldr	r0, [r1, #0]
 8003786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800378a:	f380 8809 	msr	PSP, r0
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f380 8811 	msr	BASEPRI, r0
 800379a:	4770      	bx	lr
 800379c:	f3af 8000 	nop.w

080037a0 <pxCurrentTCBConst2>:
 80037a0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop

080037a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037a8:	4808      	ldr	r0, [pc, #32]	; (80037cc <prvPortStartFirstTask+0x24>)
 80037aa:	6800      	ldr	r0, [r0, #0]
 80037ac:	6800      	ldr	r0, [r0, #0]
 80037ae:	f380 8808 	msr	MSP, r0
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f380 8814 	msr	CONTROL, r0
 80037ba:	b662      	cpsie	i
 80037bc:	b661      	cpsie	f
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	df00      	svc	0
 80037c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037ca:	bf00      	nop
 80037cc:	e000ed08 	.word	0xe000ed08

080037d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80037d6:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <xPortStartScheduler+0x120>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a46      	ldr	r2, [pc, #280]	; (80038f4 <xPortStartScheduler+0x124>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d10a      	bne.n	80037f6 <xPortStartScheduler+0x26>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	613b      	str	r3, [r7, #16]
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80037f6:	4b3e      	ldr	r3, [pc, #248]	; (80038f0 <xPortStartScheduler+0x120>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <xPortStartScheduler+0x128>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10a      	bne.n	8003816 <xPortStartScheduler+0x46>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	60fb      	str	r3, [r7, #12]
}
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <xPortStartScheduler+0x12c>)
 8003818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	22ff      	movs	r2, #255	; 0xff
 8003826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b31      	ldr	r3, [pc, #196]	; (8003900 <xPortStartScheduler+0x130>)
 800383c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <xPortStartScheduler+0x134>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003844:	e009      	b.n	800385a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003846:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <xPortStartScheduler+0x134>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3b01      	subs	r3, #1
 800384c:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <xPortStartScheduler+0x134>)
 800384e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b80      	cmp	r3, #128	; 0x80
 8003864:	d0ef      	beq.n	8003846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <xPortStartScheduler+0x134>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1c3 0307 	rsb	r3, r3, #7
 800386e:	2b04      	cmp	r3, #4
 8003870:	d00a      	beq.n	8003888 <xPortStartScheduler+0xb8>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	60bb      	str	r3, [r7, #8]
}
 8003884:	bf00      	nop
 8003886:	e7fe      	b.n	8003886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003888:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <xPortStartScheduler+0x134>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <xPortStartScheduler+0x134>)
 8003890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003892:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <xPortStartScheduler+0x134>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800389a:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <xPortStartScheduler+0x134>)
 800389c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038a6:	4b18      	ldr	r3, [pc, #96]	; (8003908 <xPortStartScheduler+0x138>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a17      	ldr	r2, [pc, #92]	; (8003908 <xPortStartScheduler+0x138>)
 80038ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <xPortStartScheduler+0x138>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a14      	ldr	r2, [pc, #80]	; (8003908 <xPortStartScheduler+0x138>)
 80038b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038be:	f000 f8dd 	bl	8003a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038c2:	4b12      	ldr	r3, [pc, #72]	; (800390c <xPortStartScheduler+0x13c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038c8:	f000 f8fc 	bl	8003ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038cc:	4b10      	ldr	r3, [pc, #64]	; (8003910 <xPortStartScheduler+0x140>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0f      	ldr	r2, [pc, #60]	; (8003910 <xPortStartScheduler+0x140>)
 80038d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80038d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80038d8:	f7ff ff66 	bl	80037a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038dc:	f7ff fba8 	bl	8003030 <vTaskSwitchContext>
	prvTaskExitError();
 80038e0:	f7ff ff20 	bl	8003724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	e000ed00 	.word	0xe000ed00
 80038f4:	410fc271 	.word	0x410fc271
 80038f8:	410fc270 	.word	0x410fc270
 80038fc:	e000e400 	.word	0xe000e400
 8003900:	20000414 	.word	0x20000414
 8003904:	20000418 	.word	0x20000418
 8003908:	e000ed20 	.word	0xe000ed20
 800390c:	2000000c 	.word	0x2000000c
 8003910:	e000ef34 	.word	0xe000ef34

08003914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	607b      	str	r3, [r7, #4]
}
 800392c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800392e:	4b0f      	ldr	r3, [pc, #60]	; (800396c <vPortEnterCritical+0x58>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <vPortEnterCritical+0x58>)
 8003936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <vPortEnterCritical+0x58>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d10f      	bne.n	8003960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <vPortEnterCritical+0x5c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <vPortEnterCritical+0x4c>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	603b      	str	r3, [r7, #0]
}
 800395c:	bf00      	nop
 800395e:	e7fe      	b.n	800395e <vPortEnterCritical+0x4a>
	}
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	2000000c 	.word	0x2000000c
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <vPortExitCritical+0x50>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <vPortExitCritical+0x24>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	607b      	str	r3, [r7, #4]
}
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <vPortExitCritical+0x50>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3b01      	subs	r3, #1
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <vPortExitCritical+0x50>)
 80039a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <vPortExitCritical+0x50>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <vPortExitCritical+0x42>
 80039aa:	2300      	movs	r3, #0
 80039ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	2000000c 	.word	0x2000000c
	...

080039d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039d0:	f3ef 8009 	mrs	r0, PSP
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <pxCurrentTCBConst>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f01e 0f10 	tst.w	lr, #16
 80039e0:	bf08      	it	eq
 80039e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80039e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ea:	6010      	str	r0, [r2, #0]
 80039ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80039f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80039f4:	f380 8811 	msr	BASEPRI, r0
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f7ff fb16 	bl	8003030 <vTaskSwitchContext>
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f380 8811 	msr	BASEPRI, r0
 8003a0c:	bc09      	pop	{r0, r3}
 8003a0e:	6819      	ldr	r1, [r3, #0]
 8003a10:	6808      	ldr	r0, [r1, #0]
 8003a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a16:	f01e 0f10 	tst.w	lr, #16
 8003a1a:	bf08      	it	eq
 8003a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a20:	f380 8809 	msr	PSP, r0
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	f3af 8000 	nop.w

08003a30 <pxCurrentTCBConst>:
 8003a30:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop

08003a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	607b      	str	r3, [r7, #4]
}
 8003a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a52:	f7ff fa35 	bl	8002ec0 <xTaskIncrementTick>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <xPortSysTickHandler+0x40>)
 8003a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f383 8811 	msr	BASEPRI, r3
}
 8003a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	e000ed04 	.word	0xe000ed04

08003a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <vPortSetupTimerInterrupt+0x34>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <vPortSetupTimerInterrupt+0x38>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <vPortSetupTimerInterrupt+0x3c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <vPortSetupTimerInterrupt+0x40>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <vPortSetupTimerInterrupt+0x44>)
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <vPortSetupTimerInterrupt+0x34>)
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	601a      	str	r2, [r3, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e010 	.word	0xe000e010
 8003ab4:	e000e018 	.word	0xe000e018
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	10624dd3 	.word	0x10624dd3
 8003ac0:	e000e014 	.word	0xe000e014

08003ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ad4 <vPortEnableVFP+0x10>
 8003ac8:	6801      	ldr	r1, [r0, #0]
 8003aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ace:	6001      	str	r1, [r0, #0]
 8003ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ad2:	bf00      	nop
 8003ad4:	e000ed88 	.word	0xe000ed88

08003ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ae4:	f7ff f942 	bl	8002d6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ae8:	4b5b      	ldr	r3, [pc, #364]	; (8003c58 <pvPortMalloc+0x180>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003af0:	f000 f920 	bl	8003d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003af4:	4b59      	ldr	r3, [pc, #356]	; (8003c5c <pvPortMalloc+0x184>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f040 8093 	bne.w	8003c28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01d      	beq.n	8003b44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b08:	2208      	movs	r2, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d014      	beq.n	8003b44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f023 0307 	bic.w	r3, r3, #7
 8003b20:	3308      	adds	r3, #8
 8003b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <pvPortMalloc+0x6c>
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	617b      	str	r3, [r7, #20]
}
 8003b40:	bf00      	nop
 8003b42:	e7fe      	b.n	8003b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d06e      	beq.n	8003c28 <pvPortMalloc+0x150>
 8003b4a:	4b45      	ldr	r3, [pc, #276]	; (8003c60 <pvPortMalloc+0x188>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d869      	bhi.n	8003c28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b54:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <pvPortMalloc+0x18c>)
 8003b56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b58:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <pvPortMalloc+0x18c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b5e:	e004      	b.n	8003b6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d903      	bls.n	8003b7c <pvPortMalloc+0xa4>
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f1      	bne.n	8003b60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <pvPortMalloc+0x180>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d050      	beq.n	8003c28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	1ad2      	subs	r2, r2, r3
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d91f      	bls.n	8003be8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <pvPortMalloc+0xf8>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	613b      	str	r3, [r7, #16]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	1ad2      	subs	r2, r2, r3
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003be2:	69b8      	ldr	r0, [r7, #24]
 8003be4:	f000 f908 	bl	8003df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <pvPortMalloc+0x188>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <pvPortMalloc+0x188>)
 8003bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <pvPortMalloc+0x188>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <pvPortMalloc+0x190>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d203      	bcs.n	8003c0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c02:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <pvPortMalloc+0x188>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <pvPortMalloc+0x190>)
 8003c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <pvPortMalloc+0x184>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <pvPortMalloc+0x194>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <pvPortMalloc+0x194>)
 8003c26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c28:	f7ff f8ae 	bl	8002d88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <pvPortMalloc+0x174>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	60fb      	str	r3, [r7, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <pvPortMalloc+0x172>
	return pvReturn;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3728      	adds	r7, #40	; 0x28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20004024 	.word	0x20004024
 8003c5c:	20004038 	.word	0x20004038
 8003c60:	20004028 	.word	0x20004028
 8003c64:	2000401c 	.word	0x2000401c
 8003c68:	2000402c 	.word	0x2000402c
 8003c6c:	20004030 	.word	0x20004030

08003c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04d      	beq.n	8003d1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c82:	2308      	movs	r3, #8
 8003c84:	425b      	negs	r3, r3
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4413      	add	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <vPortFree+0xb8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <vPortFree+0x44>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	60fb      	str	r3, [r7, #12]
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <vPortFree+0x62>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	60bb      	str	r3, [r7, #8]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <vPortFree+0xb8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01e      	beq.n	8003d1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11a      	bne.n	8003d1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <vPortFree+0xb8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003cf8:	f7ff f838 	bl	8002d6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <vPortFree+0xbc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4413      	add	r3, r2
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <vPortFree+0xbc>)
 8003d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d0a:	6938      	ldr	r0, [r7, #16]
 8003d0c:	f000 f874 	bl	8003df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d10:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <vPortFree+0xc0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	4a06      	ldr	r2, [pc, #24]	; (8003d30 <vPortFree+0xc0>)
 8003d18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d1a:	f7ff f835 	bl	8002d88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d1e:	bf00      	nop
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20004038 	.word	0x20004038
 8003d2c:	20004028 	.word	0x20004028
 8003d30:	20004034 	.word	0x20004034

08003d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d40:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <prvHeapInit+0xac>)
 8003d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00c      	beq.n	8003d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3307      	adds	r3, #7
 8003d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0307 	bic.w	r3, r3, #7
 8003d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <prvHeapInit+0xac>)
 8003d64:	4413      	add	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <prvHeapInit+0xb0>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <prvHeapInit+0xb0>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d80:	2208      	movs	r2, #8
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0307 	bic.w	r3, r3, #7
 8003d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <prvHeapInit+0xb4>)
 8003d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <prvHeapInit+0xb4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <prvHeapInit+0xb4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	1ad2      	subs	r2, r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <prvHeapInit+0xb4>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <prvHeapInit+0xb8>)
 8003dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <prvHeapInit+0xbc>)
 8003dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <prvHeapInit+0xc0>)
 8003dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	2000041c 	.word	0x2000041c
 8003de4:	2000401c 	.word	0x2000401c
 8003de8:	20004024 	.word	0x20004024
 8003dec:	2000402c 	.word	0x2000402c
 8003df0:	20004028 	.word	0x20004028
 8003df4:	20004038 	.word	0x20004038

08003df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e00:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <prvInsertBlockIntoFreeList+0xac>)
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e002      	b.n	8003e0c <prvInsertBlockIntoFreeList+0x14>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d8f7      	bhi.n	8003e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d108      	bne.n	8003e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	441a      	add	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	441a      	add	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d118      	bne.n	8003e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d00d      	beq.n	8003e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e008      	b.n	8003e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e76:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e003      	b.n	8003e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d002      	beq.n	8003e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	2000401c 	.word	0x2000401c
 8003ea8:	20004024 	.word	0x20004024

08003eac <__errno>:
 8003eac:	4b01      	ldr	r3, [pc, #4]	; (8003eb4 <__errno+0x8>)
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000010 	.word	0x20000010

08003eb8 <__libc_init_array>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	4d0d      	ldr	r5, [pc, #52]	; (8003ef0 <__libc_init_array+0x38>)
 8003ebc:	4c0d      	ldr	r4, [pc, #52]	; (8003ef4 <__libc_init_array+0x3c>)
 8003ebe:	1b64      	subs	r4, r4, r5
 8003ec0:	10a4      	asrs	r4, r4, #2
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	42a6      	cmp	r6, r4
 8003ec6:	d109      	bne.n	8003edc <__libc_init_array+0x24>
 8003ec8:	4d0b      	ldr	r5, [pc, #44]	; (8003ef8 <__libc_init_array+0x40>)
 8003eca:	4c0c      	ldr	r4, [pc, #48]	; (8003efc <__libc_init_array+0x44>)
 8003ecc:	f000 fc4e 	bl	800476c <_init>
 8003ed0:	1b64      	subs	r4, r4, r5
 8003ed2:	10a4      	asrs	r4, r4, #2
 8003ed4:	2600      	movs	r6, #0
 8003ed6:	42a6      	cmp	r6, r4
 8003ed8:	d105      	bne.n	8003ee6 <__libc_init_array+0x2e>
 8003eda:	bd70      	pop	{r4, r5, r6, pc}
 8003edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee0:	4798      	blx	r3
 8003ee2:	3601      	adds	r6, #1
 8003ee4:	e7ee      	b.n	8003ec4 <__libc_init_array+0xc>
 8003ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eea:	4798      	blx	r3
 8003eec:	3601      	adds	r6, #1
 8003eee:	e7f2      	b.n	8003ed6 <__libc_init_array+0x1e>
 8003ef0:	080049c8 	.word	0x080049c8
 8003ef4:	080049c8 	.word	0x080049c8
 8003ef8:	080049c8 	.word	0x080049c8
 8003efc:	080049cc 	.word	0x080049cc

08003f00 <memcpy>:
 8003f00:	440a      	add	r2, r1
 8003f02:	4291      	cmp	r1, r2
 8003f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f08:	d100      	bne.n	8003f0c <memcpy+0xc>
 8003f0a:	4770      	bx	lr
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f16:	4291      	cmp	r1, r2
 8003f18:	d1f9      	bne.n	8003f0e <memcpy+0xe>
 8003f1a:	bd10      	pop	{r4, pc}

08003f1c <memset>:
 8003f1c:	4402      	add	r2, r0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d100      	bne.n	8003f26 <memset+0xa>
 8003f24:	4770      	bx	lr
 8003f26:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2a:	e7f9      	b.n	8003f20 <memset+0x4>

08003f2c <siprintf>:
 8003f2c:	b40e      	push	{r1, r2, r3}
 8003f2e:	b500      	push	{lr}
 8003f30:	b09c      	sub	sp, #112	; 0x70
 8003f32:	ab1d      	add	r3, sp, #116	; 0x74
 8003f34:	9002      	str	r0, [sp, #8]
 8003f36:	9006      	str	r0, [sp, #24]
 8003f38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f3c:	4809      	ldr	r0, [pc, #36]	; (8003f64 <siprintf+0x38>)
 8003f3e:	9107      	str	r1, [sp, #28]
 8003f40:	9104      	str	r1, [sp, #16]
 8003f42:	4909      	ldr	r1, [pc, #36]	; (8003f68 <siprintf+0x3c>)
 8003f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f48:	9105      	str	r1, [sp, #20]
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	a902      	add	r1, sp, #8
 8003f50:	f000 f868 	bl	8004024 <_svfiprintf_r>
 8003f54:	9b02      	ldr	r3, [sp, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	b01c      	add	sp, #112	; 0x70
 8003f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f60:	b003      	add	sp, #12
 8003f62:	4770      	bx	lr
 8003f64:	20000010 	.word	0x20000010
 8003f68:	ffff0208 	.word	0xffff0208

08003f6c <__ssputs_r>:
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	688e      	ldr	r6, [r1, #8]
 8003f72:	429e      	cmp	r6, r3
 8003f74:	4682      	mov	sl, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	4690      	mov	r8, r2
 8003f7a:	461f      	mov	r7, r3
 8003f7c:	d838      	bhi.n	8003ff0 <__ssputs_r+0x84>
 8003f7e:	898a      	ldrh	r2, [r1, #12]
 8003f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f84:	d032      	beq.n	8003fec <__ssputs_r+0x80>
 8003f86:	6825      	ldr	r5, [r4, #0]
 8003f88:	6909      	ldr	r1, [r1, #16]
 8003f8a:	eba5 0901 	sub.w	r9, r5, r1
 8003f8e:	6965      	ldr	r5, [r4, #20]
 8003f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f98:	3301      	adds	r3, #1
 8003f9a:	444b      	add	r3, r9
 8003f9c:	106d      	asrs	r5, r5, #1
 8003f9e:	429d      	cmp	r5, r3
 8003fa0:	bf38      	it	cc
 8003fa2:	461d      	movcc	r5, r3
 8003fa4:	0553      	lsls	r3, r2, #21
 8003fa6:	d531      	bpl.n	800400c <__ssputs_r+0xa0>
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f000 fb39 	bl	8004620 <_malloc_r>
 8003fae:	4606      	mov	r6, r0
 8003fb0:	b950      	cbnz	r0, 8003fc8 <__ssputs_r+0x5c>
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	f8ca 3000 	str.w	r3, [sl]
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc8:	6921      	ldr	r1, [r4, #16]
 8003fca:	464a      	mov	r2, r9
 8003fcc:	f7ff ff98 	bl	8003f00 <memcpy>
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fda:	81a3      	strh	r3, [r4, #12]
 8003fdc:	6126      	str	r6, [r4, #16]
 8003fde:	6165      	str	r5, [r4, #20]
 8003fe0:	444e      	add	r6, r9
 8003fe2:	eba5 0509 	sub.w	r5, r5, r9
 8003fe6:	6026      	str	r6, [r4, #0]
 8003fe8:	60a5      	str	r5, [r4, #8]
 8003fea:	463e      	mov	r6, r7
 8003fec:	42be      	cmp	r6, r7
 8003fee:	d900      	bls.n	8003ff2 <__ssputs_r+0x86>
 8003ff0:	463e      	mov	r6, r7
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	f000 faa8 	bl	800454c <memmove>
 8003ffc:	68a3      	ldr	r3, [r4, #8]
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	1b9b      	subs	r3, r3, r6
 8004002:	4432      	add	r2, r6
 8004004:	60a3      	str	r3, [r4, #8]
 8004006:	6022      	str	r2, [r4, #0]
 8004008:	2000      	movs	r0, #0
 800400a:	e7db      	b.n	8003fc4 <__ssputs_r+0x58>
 800400c:	462a      	mov	r2, r5
 800400e:	f000 fb61 	bl	80046d4 <_realloc_r>
 8004012:	4606      	mov	r6, r0
 8004014:	2800      	cmp	r0, #0
 8004016:	d1e1      	bne.n	8003fdc <__ssputs_r+0x70>
 8004018:	6921      	ldr	r1, [r4, #16]
 800401a:	4650      	mov	r0, sl
 800401c:	f000 fab0 	bl	8004580 <_free_r>
 8004020:	e7c7      	b.n	8003fb2 <__ssputs_r+0x46>
	...

08004024 <_svfiprintf_r>:
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	4698      	mov	r8, r3
 800402a:	898b      	ldrh	r3, [r1, #12]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	b09d      	sub	sp, #116	; 0x74
 8004030:	4607      	mov	r7, r0
 8004032:	460d      	mov	r5, r1
 8004034:	4614      	mov	r4, r2
 8004036:	d50e      	bpl.n	8004056 <_svfiprintf_r+0x32>
 8004038:	690b      	ldr	r3, [r1, #16]
 800403a:	b963      	cbnz	r3, 8004056 <_svfiprintf_r+0x32>
 800403c:	2140      	movs	r1, #64	; 0x40
 800403e:	f000 faef 	bl	8004620 <_malloc_r>
 8004042:	6028      	str	r0, [r5, #0]
 8004044:	6128      	str	r0, [r5, #16]
 8004046:	b920      	cbnz	r0, 8004052 <_svfiprintf_r+0x2e>
 8004048:	230c      	movs	r3, #12
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	e0d1      	b.n	80041f6 <_svfiprintf_r+0x1d2>
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	616b      	str	r3, [r5, #20]
 8004056:	2300      	movs	r3, #0
 8004058:	9309      	str	r3, [sp, #36]	; 0x24
 800405a:	2320      	movs	r3, #32
 800405c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004060:	f8cd 800c 	str.w	r8, [sp, #12]
 8004064:	2330      	movs	r3, #48	; 0x30
 8004066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004210 <_svfiprintf_r+0x1ec>
 800406a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800406e:	f04f 0901 	mov.w	r9, #1
 8004072:	4623      	mov	r3, r4
 8004074:	469a      	mov	sl, r3
 8004076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800407a:	b10a      	cbz	r2, 8004080 <_svfiprintf_r+0x5c>
 800407c:	2a25      	cmp	r2, #37	; 0x25
 800407e:	d1f9      	bne.n	8004074 <_svfiprintf_r+0x50>
 8004080:	ebba 0b04 	subs.w	fp, sl, r4
 8004084:	d00b      	beq.n	800409e <_svfiprintf_r+0x7a>
 8004086:	465b      	mov	r3, fp
 8004088:	4622      	mov	r2, r4
 800408a:	4629      	mov	r1, r5
 800408c:	4638      	mov	r0, r7
 800408e:	f7ff ff6d 	bl	8003f6c <__ssputs_r>
 8004092:	3001      	adds	r0, #1
 8004094:	f000 80aa 	beq.w	80041ec <_svfiprintf_r+0x1c8>
 8004098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800409a:	445a      	add	r2, fp
 800409c:	9209      	str	r2, [sp, #36]	; 0x24
 800409e:	f89a 3000 	ldrb.w	r3, [sl]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80a2 	beq.w	80041ec <_svfiprintf_r+0x1c8>
 80040a8:	2300      	movs	r3, #0
 80040aa:	f04f 32ff 	mov.w	r2, #4294967295
 80040ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040b2:	f10a 0a01 	add.w	sl, sl, #1
 80040b6:	9304      	str	r3, [sp, #16]
 80040b8:	9307      	str	r3, [sp, #28]
 80040ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040be:	931a      	str	r3, [sp, #104]	; 0x68
 80040c0:	4654      	mov	r4, sl
 80040c2:	2205      	movs	r2, #5
 80040c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c8:	4851      	ldr	r0, [pc, #324]	; (8004210 <_svfiprintf_r+0x1ec>)
 80040ca:	f7fc f889 	bl	80001e0 <memchr>
 80040ce:	9a04      	ldr	r2, [sp, #16]
 80040d0:	b9d8      	cbnz	r0, 800410a <_svfiprintf_r+0xe6>
 80040d2:	06d0      	lsls	r0, r2, #27
 80040d4:	bf44      	itt	mi
 80040d6:	2320      	movmi	r3, #32
 80040d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040dc:	0711      	lsls	r1, r2, #28
 80040de:	bf44      	itt	mi
 80040e0:	232b      	movmi	r3, #43	; 0x2b
 80040e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040e6:	f89a 3000 	ldrb.w	r3, [sl]
 80040ea:	2b2a      	cmp	r3, #42	; 0x2a
 80040ec:	d015      	beq.n	800411a <_svfiprintf_r+0xf6>
 80040ee:	9a07      	ldr	r2, [sp, #28]
 80040f0:	4654      	mov	r4, sl
 80040f2:	2000      	movs	r0, #0
 80040f4:	f04f 0c0a 	mov.w	ip, #10
 80040f8:	4621      	mov	r1, r4
 80040fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040fe:	3b30      	subs	r3, #48	; 0x30
 8004100:	2b09      	cmp	r3, #9
 8004102:	d94e      	bls.n	80041a2 <_svfiprintf_r+0x17e>
 8004104:	b1b0      	cbz	r0, 8004134 <_svfiprintf_r+0x110>
 8004106:	9207      	str	r2, [sp, #28]
 8004108:	e014      	b.n	8004134 <_svfiprintf_r+0x110>
 800410a:	eba0 0308 	sub.w	r3, r0, r8
 800410e:	fa09 f303 	lsl.w	r3, r9, r3
 8004112:	4313      	orrs	r3, r2
 8004114:	9304      	str	r3, [sp, #16]
 8004116:	46a2      	mov	sl, r4
 8004118:	e7d2      	b.n	80040c0 <_svfiprintf_r+0x9c>
 800411a:	9b03      	ldr	r3, [sp, #12]
 800411c:	1d19      	adds	r1, r3, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	9103      	str	r1, [sp, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfbb      	ittet	lt
 8004126:	425b      	neglt	r3, r3
 8004128:	f042 0202 	orrlt.w	r2, r2, #2
 800412c:	9307      	strge	r3, [sp, #28]
 800412e:	9307      	strlt	r3, [sp, #28]
 8004130:	bfb8      	it	lt
 8004132:	9204      	strlt	r2, [sp, #16]
 8004134:	7823      	ldrb	r3, [r4, #0]
 8004136:	2b2e      	cmp	r3, #46	; 0x2e
 8004138:	d10c      	bne.n	8004154 <_svfiprintf_r+0x130>
 800413a:	7863      	ldrb	r3, [r4, #1]
 800413c:	2b2a      	cmp	r3, #42	; 0x2a
 800413e:	d135      	bne.n	80041ac <_svfiprintf_r+0x188>
 8004140:	9b03      	ldr	r3, [sp, #12]
 8004142:	1d1a      	adds	r2, r3, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	9203      	str	r2, [sp, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	bfb8      	it	lt
 800414c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004150:	3402      	adds	r4, #2
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004220 <_svfiprintf_r+0x1fc>
 8004158:	7821      	ldrb	r1, [r4, #0]
 800415a:	2203      	movs	r2, #3
 800415c:	4650      	mov	r0, sl
 800415e:	f7fc f83f 	bl	80001e0 <memchr>
 8004162:	b140      	cbz	r0, 8004176 <_svfiprintf_r+0x152>
 8004164:	2340      	movs	r3, #64	; 0x40
 8004166:	eba0 000a 	sub.w	r0, r0, sl
 800416a:	fa03 f000 	lsl.w	r0, r3, r0
 800416e:	9b04      	ldr	r3, [sp, #16]
 8004170:	4303      	orrs	r3, r0
 8004172:	3401      	adds	r4, #1
 8004174:	9304      	str	r3, [sp, #16]
 8004176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800417a:	4826      	ldr	r0, [pc, #152]	; (8004214 <_svfiprintf_r+0x1f0>)
 800417c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004180:	2206      	movs	r2, #6
 8004182:	f7fc f82d 	bl	80001e0 <memchr>
 8004186:	2800      	cmp	r0, #0
 8004188:	d038      	beq.n	80041fc <_svfiprintf_r+0x1d8>
 800418a:	4b23      	ldr	r3, [pc, #140]	; (8004218 <_svfiprintf_r+0x1f4>)
 800418c:	bb1b      	cbnz	r3, 80041d6 <_svfiprintf_r+0x1b2>
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	3307      	adds	r3, #7
 8004192:	f023 0307 	bic.w	r3, r3, #7
 8004196:	3308      	adds	r3, #8
 8004198:	9303      	str	r3, [sp, #12]
 800419a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800419c:	4433      	add	r3, r6
 800419e:	9309      	str	r3, [sp, #36]	; 0x24
 80041a0:	e767      	b.n	8004072 <_svfiprintf_r+0x4e>
 80041a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80041a6:	460c      	mov	r4, r1
 80041a8:	2001      	movs	r0, #1
 80041aa:	e7a5      	b.n	80040f8 <_svfiprintf_r+0xd4>
 80041ac:	2300      	movs	r3, #0
 80041ae:	3401      	adds	r4, #1
 80041b0:	9305      	str	r3, [sp, #20]
 80041b2:	4619      	mov	r1, r3
 80041b4:	f04f 0c0a 	mov.w	ip, #10
 80041b8:	4620      	mov	r0, r4
 80041ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041be:	3a30      	subs	r2, #48	; 0x30
 80041c0:	2a09      	cmp	r2, #9
 80041c2:	d903      	bls.n	80041cc <_svfiprintf_r+0x1a8>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0c5      	beq.n	8004154 <_svfiprintf_r+0x130>
 80041c8:	9105      	str	r1, [sp, #20]
 80041ca:	e7c3      	b.n	8004154 <_svfiprintf_r+0x130>
 80041cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80041d0:	4604      	mov	r4, r0
 80041d2:	2301      	movs	r3, #1
 80041d4:	e7f0      	b.n	80041b8 <_svfiprintf_r+0x194>
 80041d6:	ab03      	add	r3, sp, #12
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	462a      	mov	r2, r5
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <_svfiprintf_r+0x1f8>)
 80041de:	a904      	add	r1, sp, #16
 80041e0:	4638      	mov	r0, r7
 80041e2:	f3af 8000 	nop.w
 80041e6:	1c42      	adds	r2, r0, #1
 80041e8:	4606      	mov	r6, r0
 80041ea:	d1d6      	bne.n	800419a <_svfiprintf_r+0x176>
 80041ec:	89ab      	ldrh	r3, [r5, #12]
 80041ee:	065b      	lsls	r3, r3, #25
 80041f0:	f53f af2c 	bmi.w	800404c <_svfiprintf_r+0x28>
 80041f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041f6:	b01d      	add	sp, #116	; 0x74
 80041f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fc:	ab03      	add	r3, sp, #12
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	462a      	mov	r2, r5
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <_svfiprintf_r+0x1f8>)
 8004204:	a904      	add	r1, sp, #16
 8004206:	4638      	mov	r0, r7
 8004208:	f000 f87a 	bl	8004300 <_printf_i>
 800420c:	e7eb      	b.n	80041e6 <_svfiprintf_r+0x1c2>
 800420e:	bf00      	nop
 8004210:	0800498c 	.word	0x0800498c
 8004214:	08004996 	.word	0x08004996
 8004218:	00000000 	.word	0x00000000
 800421c:	08003f6d 	.word	0x08003f6d
 8004220:	08004992 	.word	0x08004992

08004224 <_printf_common>:
 8004224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004228:	4616      	mov	r6, r2
 800422a:	4699      	mov	r9, r3
 800422c:	688a      	ldr	r2, [r1, #8]
 800422e:	690b      	ldr	r3, [r1, #16]
 8004230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004234:	4293      	cmp	r3, r2
 8004236:	bfb8      	it	lt
 8004238:	4613      	movlt	r3, r2
 800423a:	6033      	str	r3, [r6, #0]
 800423c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004240:	4607      	mov	r7, r0
 8004242:	460c      	mov	r4, r1
 8004244:	b10a      	cbz	r2, 800424a <_printf_common+0x26>
 8004246:	3301      	adds	r3, #1
 8004248:	6033      	str	r3, [r6, #0]
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	0699      	lsls	r1, r3, #26
 800424e:	bf42      	ittt	mi
 8004250:	6833      	ldrmi	r3, [r6, #0]
 8004252:	3302      	addmi	r3, #2
 8004254:	6033      	strmi	r3, [r6, #0]
 8004256:	6825      	ldr	r5, [r4, #0]
 8004258:	f015 0506 	ands.w	r5, r5, #6
 800425c:	d106      	bne.n	800426c <_printf_common+0x48>
 800425e:	f104 0a19 	add.w	sl, r4, #25
 8004262:	68e3      	ldr	r3, [r4, #12]
 8004264:	6832      	ldr	r2, [r6, #0]
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	42ab      	cmp	r3, r5
 800426a:	dc26      	bgt.n	80042ba <_printf_common+0x96>
 800426c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004270:	1e13      	subs	r3, r2, #0
 8004272:	6822      	ldr	r2, [r4, #0]
 8004274:	bf18      	it	ne
 8004276:	2301      	movne	r3, #1
 8004278:	0692      	lsls	r2, r2, #26
 800427a:	d42b      	bmi.n	80042d4 <_printf_common+0xb0>
 800427c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004280:	4649      	mov	r1, r9
 8004282:	4638      	mov	r0, r7
 8004284:	47c0      	blx	r8
 8004286:	3001      	adds	r0, #1
 8004288:	d01e      	beq.n	80042c8 <_printf_common+0xa4>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	68e5      	ldr	r5, [r4, #12]
 800428e:	6832      	ldr	r2, [r6, #0]
 8004290:	f003 0306 	and.w	r3, r3, #6
 8004294:	2b04      	cmp	r3, #4
 8004296:	bf08      	it	eq
 8004298:	1aad      	subeq	r5, r5, r2
 800429a:	68a3      	ldr	r3, [r4, #8]
 800429c:	6922      	ldr	r2, [r4, #16]
 800429e:	bf0c      	ite	eq
 80042a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042a4:	2500      	movne	r5, #0
 80042a6:	4293      	cmp	r3, r2
 80042a8:	bfc4      	itt	gt
 80042aa:	1a9b      	subgt	r3, r3, r2
 80042ac:	18ed      	addgt	r5, r5, r3
 80042ae:	2600      	movs	r6, #0
 80042b0:	341a      	adds	r4, #26
 80042b2:	42b5      	cmp	r5, r6
 80042b4:	d11a      	bne.n	80042ec <_printf_common+0xc8>
 80042b6:	2000      	movs	r0, #0
 80042b8:	e008      	b.n	80042cc <_printf_common+0xa8>
 80042ba:	2301      	movs	r3, #1
 80042bc:	4652      	mov	r2, sl
 80042be:	4649      	mov	r1, r9
 80042c0:	4638      	mov	r0, r7
 80042c2:	47c0      	blx	r8
 80042c4:	3001      	adds	r0, #1
 80042c6:	d103      	bne.n	80042d0 <_printf_common+0xac>
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d0:	3501      	adds	r5, #1
 80042d2:	e7c6      	b.n	8004262 <_printf_common+0x3e>
 80042d4:	18e1      	adds	r1, r4, r3
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	2030      	movs	r0, #48	; 0x30
 80042da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042de:	4422      	add	r2, r4
 80042e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042e8:	3302      	adds	r3, #2
 80042ea:	e7c7      	b.n	800427c <_printf_common+0x58>
 80042ec:	2301      	movs	r3, #1
 80042ee:	4622      	mov	r2, r4
 80042f0:	4649      	mov	r1, r9
 80042f2:	4638      	mov	r0, r7
 80042f4:	47c0      	blx	r8
 80042f6:	3001      	adds	r0, #1
 80042f8:	d0e6      	beq.n	80042c8 <_printf_common+0xa4>
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7d9      	b.n	80042b2 <_printf_common+0x8e>
	...

08004300 <_printf_i>:
 8004300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004304:	460c      	mov	r4, r1
 8004306:	4691      	mov	r9, r2
 8004308:	7e27      	ldrb	r7, [r4, #24]
 800430a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800430c:	2f78      	cmp	r7, #120	; 0x78
 800430e:	4680      	mov	r8, r0
 8004310:	469a      	mov	sl, r3
 8004312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004316:	d807      	bhi.n	8004328 <_printf_i+0x28>
 8004318:	2f62      	cmp	r7, #98	; 0x62
 800431a:	d80a      	bhi.n	8004332 <_printf_i+0x32>
 800431c:	2f00      	cmp	r7, #0
 800431e:	f000 80d8 	beq.w	80044d2 <_printf_i+0x1d2>
 8004322:	2f58      	cmp	r7, #88	; 0x58
 8004324:	f000 80a3 	beq.w	800446e <_printf_i+0x16e>
 8004328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800432c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004330:	e03a      	b.n	80043a8 <_printf_i+0xa8>
 8004332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004336:	2b15      	cmp	r3, #21
 8004338:	d8f6      	bhi.n	8004328 <_printf_i+0x28>
 800433a:	a001      	add	r0, pc, #4	; (adr r0, 8004340 <_printf_i+0x40>)
 800433c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004340:	08004399 	.word	0x08004399
 8004344:	080043ad 	.word	0x080043ad
 8004348:	08004329 	.word	0x08004329
 800434c:	08004329 	.word	0x08004329
 8004350:	08004329 	.word	0x08004329
 8004354:	08004329 	.word	0x08004329
 8004358:	080043ad 	.word	0x080043ad
 800435c:	08004329 	.word	0x08004329
 8004360:	08004329 	.word	0x08004329
 8004364:	08004329 	.word	0x08004329
 8004368:	08004329 	.word	0x08004329
 800436c:	080044b9 	.word	0x080044b9
 8004370:	080043dd 	.word	0x080043dd
 8004374:	0800449b 	.word	0x0800449b
 8004378:	08004329 	.word	0x08004329
 800437c:	08004329 	.word	0x08004329
 8004380:	080044db 	.word	0x080044db
 8004384:	08004329 	.word	0x08004329
 8004388:	080043dd 	.word	0x080043dd
 800438c:	08004329 	.word	0x08004329
 8004390:	08004329 	.word	0x08004329
 8004394:	080044a3 	.word	0x080044a3
 8004398:	680b      	ldr	r3, [r1, #0]
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	600a      	str	r2, [r1, #0]
 80043a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0a3      	b.n	80044f4 <_printf_i+0x1f4>
 80043ac:	6825      	ldr	r5, [r4, #0]
 80043ae:	6808      	ldr	r0, [r1, #0]
 80043b0:	062e      	lsls	r6, r5, #24
 80043b2:	f100 0304 	add.w	r3, r0, #4
 80043b6:	d50a      	bpl.n	80043ce <_printf_i+0xce>
 80043b8:	6805      	ldr	r5, [r0, #0]
 80043ba:	600b      	str	r3, [r1, #0]
 80043bc:	2d00      	cmp	r5, #0
 80043be:	da03      	bge.n	80043c8 <_printf_i+0xc8>
 80043c0:	232d      	movs	r3, #45	; 0x2d
 80043c2:	426d      	negs	r5, r5
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c8:	485e      	ldr	r0, [pc, #376]	; (8004544 <_printf_i+0x244>)
 80043ca:	230a      	movs	r3, #10
 80043cc:	e019      	b.n	8004402 <_printf_i+0x102>
 80043ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043d2:	6805      	ldr	r5, [r0, #0]
 80043d4:	600b      	str	r3, [r1, #0]
 80043d6:	bf18      	it	ne
 80043d8:	b22d      	sxthne	r5, r5
 80043da:	e7ef      	b.n	80043bc <_printf_i+0xbc>
 80043dc:	680b      	ldr	r3, [r1, #0]
 80043de:	6825      	ldr	r5, [r4, #0]
 80043e0:	1d18      	adds	r0, r3, #4
 80043e2:	6008      	str	r0, [r1, #0]
 80043e4:	0628      	lsls	r0, r5, #24
 80043e6:	d501      	bpl.n	80043ec <_printf_i+0xec>
 80043e8:	681d      	ldr	r5, [r3, #0]
 80043ea:	e002      	b.n	80043f2 <_printf_i+0xf2>
 80043ec:	0669      	lsls	r1, r5, #25
 80043ee:	d5fb      	bpl.n	80043e8 <_printf_i+0xe8>
 80043f0:	881d      	ldrh	r5, [r3, #0]
 80043f2:	4854      	ldr	r0, [pc, #336]	; (8004544 <_printf_i+0x244>)
 80043f4:	2f6f      	cmp	r7, #111	; 0x6f
 80043f6:	bf0c      	ite	eq
 80043f8:	2308      	moveq	r3, #8
 80043fa:	230a      	movne	r3, #10
 80043fc:	2100      	movs	r1, #0
 80043fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004402:	6866      	ldr	r6, [r4, #4]
 8004404:	60a6      	str	r6, [r4, #8]
 8004406:	2e00      	cmp	r6, #0
 8004408:	bfa2      	ittt	ge
 800440a:	6821      	ldrge	r1, [r4, #0]
 800440c:	f021 0104 	bicge.w	r1, r1, #4
 8004410:	6021      	strge	r1, [r4, #0]
 8004412:	b90d      	cbnz	r5, 8004418 <_printf_i+0x118>
 8004414:	2e00      	cmp	r6, #0
 8004416:	d04d      	beq.n	80044b4 <_printf_i+0x1b4>
 8004418:	4616      	mov	r6, r2
 800441a:	fbb5 f1f3 	udiv	r1, r5, r3
 800441e:	fb03 5711 	mls	r7, r3, r1, r5
 8004422:	5dc7      	ldrb	r7, [r0, r7]
 8004424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004428:	462f      	mov	r7, r5
 800442a:	42bb      	cmp	r3, r7
 800442c:	460d      	mov	r5, r1
 800442e:	d9f4      	bls.n	800441a <_printf_i+0x11a>
 8004430:	2b08      	cmp	r3, #8
 8004432:	d10b      	bne.n	800444c <_printf_i+0x14c>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	07df      	lsls	r7, r3, #31
 8004438:	d508      	bpl.n	800444c <_printf_i+0x14c>
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	6861      	ldr	r1, [r4, #4]
 800443e:	4299      	cmp	r1, r3
 8004440:	bfde      	ittt	le
 8004442:	2330      	movle	r3, #48	; 0x30
 8004444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004448:	f106 36ff 	addle.w	r6, r6, #4294967295
 800444c:	1b92      	subs	r2, r2, r6
 800444e:	6122      	str	r2, [r4, #16]
 8004450:	f8cd a000 	str.w	sl, [sp]
 8004454:	464b      	mov	r3, r9
 8004456:	aa03      	add	r2, sp, #12
 8004458:	4621      	mov	r1, r4
 800445a:	4640      	mov	r0, r8
 800445c:	f7ff fee2 	bl	8004224 <_printf_common>
 8004460:	3001      	adds	r0, #1
 8004462:	d14c      	bne.n	80044fe <_printf_i+0x1fe>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	b004      	add	sp, #16
 800446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446e:	4835      	ldr	r0, [pc, #212]	; (8004544 <_printf_i+0x244>)
 8004470:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	680e      	ldr	r6, [r1, #0]
 8004478:	061f      	lsls	r7, r3, #24
 800447a:	f856 5b04 	ldr.w	r5, [r6], #4
 800447e:	600e      	str	r6, [r1, #0]
 8004480:	d514      	bpl.n	80044ac <_printf_i+0x1ac>
 8004482:	07d9      	lsls	r1, r3, #31
 8004484:	bf44      	itt	mi
 8004486:	f043 0320 	orrmi.w	r3, r3, #32
 800448a:	6023      	strmi	r3, [r4, #0]
 800448c:	b91d      	cbnz	r5, 8004496 <_printf_i+0x196>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	f023 0320 	bic.w	r3, r3, #32
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	2310      	movs	r3, #16
 8004498:	e7b0      	b.n	80043fc <_printf_i+0xfc>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	f043 0320 	orr.w	r3, r3, #32
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	2378      	movs	r3, #120	; 0x78
 80044a4:	4828      	ldr	r0, [pc, #160]	; (8004548 <_printf_i+0x248>)
 80044a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044aa:	e7e3      	b.n	8004474 <_printf_i+0x174>
 80044ac:	065e      	lsls	r6, r3, #25
 80044ae:	bf48      	it	mi
 80044b0:	b2ad      	uxthmi	r5, r5
 80044b2:	e7e6      	b.n	8004482 <_printf_i+0x182>
 80044b4:	4616      	mov	r6, r2
 80044b6:	e7bb      	b.n	8004430 <_printf_i+0x130>
 80044b8:	680b      	ldr	r3, [r1, #0]
 80044ba:	6826      	ldr	r6, [r4, #0]
 80044bc:	6960      	ldr	r0, [r4, #20]
 80044be:	1d1d      	adds	r5, r3, #4
 80044c0:	600d      	str	r5, [r1, #0]
 80044c2:	0635      	lsls	r5, r6, #24
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	d501      	bpl.n	80044cc <_printf_i+0x1cc>
 80044c8:	6018      	str	r0, [r3, #0]
 80044ca:	e002      	b.n	80044d2 <_printf_i+0x1d2>
 80044cc:	0671      	lsls	r1, r6, #25
 80044ce:	d5fb      	bpl.n	80044c8 <_printf_i+0x1c8>
 80044d0:	8018      	strh	r0, [r3, #0]
 80044d2:	2300      	movs	r3, #0
 80044d4:	6123      	str	r3, [r4, #16]
 80044d6:	4616      	mov	r6, r2
 80044d8:	e7ba      	b.n	8004450 <_printf_i+0x150>
 80044da:	680b      	ldr	r3, [r1, #0]
 80044dc:	1d1a      	adds	r2, r3, #4
 80044de:	600a      	str	r2, [r1, #0]
 80044e0:	681e      	ldr	r6, [r3, #0]
 80044e2:	6862      	ldr	r2, [r4, #4]
 80044e4:	2100      	movs	r1, #0
 80044e6:	4630      	mov	r0, r6
 80044e8:	f7fb fe7a 	bl	80001e0 <memchr>
 80044ec:	b108      	cbz	r0, 80044f2 <_printf_i+0x1f2>
 80044ee:	1b80      	subs	r0, r0, r6
 80044f0:	6060      	str	r0, [r4, #4]
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	2300      	movs	r3, #0
 80044f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fc:	e7a8      	b.n	8004450 <_printf_i+0x150>
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	4632      	mov	r2, r6
 8004502:	4649      	mov	r1, r9
 8004504:	4640      	mov	r0, r8
 8004506:	47d0      	blx	sl
 8004508:	3001      	adds	r0, #1
 800450a:	d0ab      	beq.n	8004464 <_printf_i+0x164>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	079b      	lsls	r3, r3, #30
 8004510:	d413      	bmi.n	800453a <_printf_i+0x23a>
 8004512:	68e0      	ldr	r0, [r4, #12]
 8004514:	9b03      	ldr	r3, [sp, #12]
 8004516:	4298      	cmp	r0, r3
 8004518:	bfb8      	it	lt
 800451a:	4618      	movlt	r0, r3
 800451c:	e7a4      	b.n	8004468 <_printf_i+0x168>
 800451e:	2301      	movs	r3, #1
 8004520:	4632      	mov	r2, r6
 8004522:	4649      	mov	r1, r9
 8004524:	4640      	mov	r0, r8
 8004526:	47d0      	blx	sl
 8004528:	3001      	adds	r0, #1
 800452a:	d09b      	beq.n	8004464 <_printf_i+0x164>
 800452c:	3501      	adds	r5, #1
 800452e:	68e3      	ldr	r3, [r4, #12]
 8004530:	9903      	ldr	r1, [sp, #12]
 8004532:	1a5b      	subs	r3, r3, r1
 8004534:	42ab      	cmp	r3, r5
 8004536:	dcf2      	bgt.n	800451e <_printf_i+0x21e>
 8004538:	e7eb      	b.n	8004512 <_printf_i+0x212>
 800453a:	2500      	movs	r5, #0
 800453c:	f104 0619 	add.w	r6, r4, #25
 8004540:	e7f5      	b.n	800452e <_printf_i+0x22e>
 8004542:	bf00      	nop
 8004544:	0800499d 	.word	0x0800499d
 8004548:	080049ae 	.word	0x080049ae

0800454c <memmove>:
 800454c:	4288      	cmp	r0, r1
 800454e:	b510      	push	{r4, lr}
 8004550:	eb01 0402 	add.w	r4, r1, r2
 8004554:	d902      	bls.n	800455c <memmove+0x10>
 8004556:	4284      	cmp	r4, r0
 8004558:	4623      	mov	r3, r4
 800455a:	d807      	bhi.n	800456c <memmove+0x20>
 800455c:	1e43      	subs	r3, r0, #1
 800455e:	42a1      	cmp	r1, r4
 8004560:	d008      	beq.n	8004574 <memmove+0x28>
 8004562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800456a:	e7f8      	b.n	800455e <memmove+0x12>
 800456c:	4402      	add	r2, r0
 800456e:	4601      	mov	r1, r0
 8004570:	428a      	cmp	r2, r1
 8004572:	d100      	bne.n	8004576 <memmove+0x2a>
 8004574:	bd10      	pop	{r4, pc}
 8004576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800457a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800457e:	e7f7      	b.n	8004570 <memmove+0x24>

08004580 <_free_r>:
 8004580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004582:	2900      	cmp	r1, #0
 8004584:	d048      	beq.n	8004618 <_free_r+0x98>
 8004586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800458a:	9001      	str	r0, [sp, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f1a1 0404 	sub.w	r4, r1, #4
 8004592:	bfb8      	it	lt
 8004594:	18e4      	addlt	r4, r4, r3
 8004596:	f000 f8d3 	bl	8004740 <__malloc_lock>
 800459a:	4a20      	ldr	r2, [pc, #128]	; (800461c <_free_r+0x9c>)
 800459c:	9801      	ldr	r0, [sp, #4]
 800459e:	6813      	ldr	r3, [r2, #0]
 80045a0:	4615      	mov	r5, r2
 80045a2:	b933      	cbnz	r3, 80045b2 <_free_r+0x32>
 80045a4:	6063      	str	r3, [r4, #4]
 80045a6:	6014      	str	r4, [r2, #0]
 80045a8:	b003      	add	sp, #12
 80045aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045ae:	f000 b8cd 	b.w	800474c <__malloc_unlock>
 80045b2:	42a3      	cmp	r3, r4
 80045b4:	d90b      	bls.n	80045ce <_free_r+0x4e>
 80045b6:	6821      	ldr	r1, [r4, #0]
 80045b8:	1862      	adds	r2, r4, r1
 80045ba:	4293      	cmp	r3, r2
 80045bc:	bf04      	itt	eq
 80045be:	681a      	ldreq	r2, [r3, #0]
 80045c0:	685b      	ldreq	r3, [r3, #4]
 80045c2:	6063      	str	r3, [r4, #4]
 80045c4:	bf04      	itt	eq
 80045c6:	1852      	addeq	r2, r2, r1
 80045c8:	6022      	streq	r2, [r4, #0]
 80045ca:	602c      	str	r4, [r5, #0]
 80045cc:	e7ec      	b.n	80045a8 <_free_r+0x28>
 80045ce:	461a      	mov	r2, r3
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b10b      	cbz	r3, 80045d8 <_free_r+0x58>
 80045d4:	42a3      	cmp	r3, r4
 80045d6:	d9fa      	bls.n	80045ce <_free_r+0x4e>
 80045d8:	6811      	ldr	r1, [r2, #0]
 80045da:	1855      	adds	r5, r2, r1
 80045dc:	42a5      	cmp	r5, r4
 80045de:	d10b      	bne.n	80045f8 <_free_r+0x78>
 80045e0:	6824      	ldr	r4, [r4, #0]
 80045e2:	4421      	add	r1, r4
 80045e4:	1854      	adds	r4, r2, r1
 80045e6:	42a3      	cmp	r3, r4
 80045e8:	6011      	str	r1, [r2, #0]
 80045ea:	d1dd      	bne.n	80045a8 <_free_r+0x28>
 80045ec:	681c      	ldr	r4, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	6053      	str	r3, [r2, #4]
 80045f2:	4421      	add	r1, r4
 80045f4:	6011      	str	r1, [r2, #0]
 80045f6:	e7d7      	b.n	80045a8 <_free_r+0x28>
 80045f8:	d902      	bls.n	8004600 <_free_r+0x80>
 80045fa:	230c      	movs	r3, #12
 80045fc:	6003      	str	r3, [r0, #0]
 80045fe:	e7d3      	b.n	80045a8 <_free_r+0x28>
 8004600:	6825      	ldr	r5, [r4, #0]
 8004602:	1961      	adds	r1, r4, r5
 8004604:	428b      	cmp	r3, r1
 8004606:	bf04      	itt	eq
 8004608:	6819      	ldreq	r1, [r3, #0]
 800460a:	685b      	ldreq	r3, [r3, #4]
 800460c:	6063      	str	r3, [r4, #4]
 800460e:	bf04      	itt	eq
 8004610:	1949      	addeq	r1, r1, r5
 8004612:	6021      	streq	r1, [r4, #0]
 8004614:	6054      	str	r4, [r2, #4]
 8004616:	e7c7      	b.n	80045a8 <_free_r+0x28>
 8004618:	b003      	add	sp, #12
 800461a:	bd30      	pop	{r4, r5, pc}
 800461c:	2000403c 	.word	0x2000403c

08004620 <_malloc_r>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	1ccd      	adds	r5, r1, #3
 8004624:	f025 0503 	bic.w	r5, r5, #3
 8004628:	3508      	adds	r5, #8
 800462a:	2d0c      	cmp	r5, #12
 800462c:	bf38      	it	cc
 800462e:	250c      	movcc	r5, #12
 8004630:	2d00      	cmp	r5, #0
 8004632:	4606      	mov	r6, r0
 8004634:	db01      	blt.n	800463a <_malloc_r+0x1a>
 8004636:	42a9      	cmp	r1, r5
 8004638:	d903      	bls.n	8004642 <_malloc_r+0x22>
 800463a:	230c      	movs	r3, #12
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	2000      	movs	r0, #0
 8004640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004642:	f000 f87d 	bl	8004740 <__malloc_lock>
 8004646:	4921      	ldr	r1, [pc, #132]	; (80046cc <_malloc_r+0xac>)
 8004648:	680a      	ldr	r2, [r1, #0]
 800464a:	4614      	mov	r4, r2
 800464c:	b99c      	cbnz	r4, 8004676 <_malloc_r+0x56>
 800464e:	4f20      	ldr	r7, [pc, #128]	; (80046d0 <_malloc_r+0xb0>)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	b923      	cbnz	r3, 800465e <_malloc_r+0x3e>
 8004654:	4621      	mov	r1, r4
 8004656:	4630      	mov	r0, r6
 8004658:	f000 f862 	bl	8004720 <_sbrk_r>
 800465c:	6038      	str	r0, [r7, #0]
 800465e:	4629      	mov	r1, r5
 8004660:	4630      	mov	r0, r6
 8004662:	f000 f85d 	bl	8004720 <_sbrk_r>
 8004666:	1c43      	adds	r3, r0, #1
 8004668:	d123      	bne.n	80046b2 <_malloc_r+0x92>
 800466a:	230c      	movs	r3, #12
 800466c:	6033      	str	r3, [r6, #0]
 800466e:	4630      	mov	r0, r6
 8004670:	f000 f86c 	bl	800474c <__malloc_unlock>
 8004674:	e7e3      	b.n	800463e <_malloc_r+0x1e>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	1b5b      	subs	r3, r3, r5
 800467a:	d417      	bmi.n	80046ac <_malloc_r+0x8c>
 800467c:	2b0b      	cmp	r3, #11
 800467e:	d903      	bls.n	8004688 <_malloc_r+0x68>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	441c      	add	r4, r3
 8004684:	6025      	str	r5, [r4, #0]
 8004686:	e004      	b.n	8004692 <_malloc_r+0x72>
 8004688:	6863      	ldr	r3, [r4, #4]
 800468a:	42a2      	cmp	r2, r4
 800468c:	bf0c      	ite	eq
 800468e:	600b      	streq	r3, [r1, #0]
 8004690:	6053      	strne	r3, [r2, #4]
 8004692:	4630      	mov	r0, r6
 8004694:	f000 f85a 	bl	800474c <__malloc_unlock>
 8004698:	f104 000b 	add.w	r0, r4, #11
 800469c:	1d23      	adds	r3, r4, #4
 800469e:	f020 0007 	bic.w	r0, r0, #7
 80046a2:	1ac2      	subs	r2, r0, r3
 80046a4:	d0cc      	beq.n	8004640 <_malloc_r+0x20>
 80046a6:	1a1b      	subs	r3, r3, r0
 80046a8:	50a3      	str	r3, [r4, r2]
 80046aa:	e7c9      	b.n	8004640 <_malloc_r+0x20>
 80046ac:	4622      	mov	r2, r4
 80046ae:	6864      	ldr	r4, [r4, #4]
 80046b0:	e7cc      	b.n	800464c <_malloc_r+0x2c>
 80046b2:	1cc4      	adds	r4, r0, #3
 80046b4:	f024 0403 	bic.w	r4, r4, #3
 80046b8:	42a0      	cmp	r0, r4
 80046ba:	d0e3      	beq.n	8004684 <_malloc_r+0x64>
 80046bc:	1a21      	subs	r1, r4, r0
 80046be:	4630      	mov	r0, r6
 80046c0:	f000 f82e 	bl	8004720 <_sbrk_r>
 80046c4:	3001      	adds	r0, #1
 80046c6:	d1dd      	bne.n	8004684 <_malloc_r+0x64>
 80046c8:	e7cf      	b.n	800466a <_malloc_r+0x4a>
 80046ca:	bf00      	nop
 80046cc:	2000403c 	.word	0x2000403c
 80046d0:	20004040 	.word	0x20004040

080046d4 <_realloc_r>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	4607      	mov	r7, r0
 80046d8:	4614      	mov	r4, r2
 80046da:	460e      	mov	r6, r1
 80046dc:	b921      	cbnz	r1, 80046e8 <_realloc_r+0x14>
 80046de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046e2:	4611      	mov	r1, r2
 80046e4:	f7ff bf9c 	b.w	8004620 <_malloc_r>
 80046e8:	b922      	cbnz	r2, 80046f4 <_realloc_r+0x20>
 80046ea:	f7ff ff49 	bl	8004580 <_free_r>
 80046ee:	4625      	mov	r5, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f4:	f000 f830 	bl	8004758 <_malloc_usable_size_r>
 80046f8:	42a0      	cmp	r0, r4
 80046fa:	d20f      	bcs.n	800471c <_realloc_r+0x48>
 80046fc:	4621      	mov	r1, r4
 80046fe:	4638      	mov	r0, r7
 8004700:	f7ff ff8e 	bl	8004620 <_malloc_r>
 8004704:	4605      	mov	r5, r0
 8004706:	2800      	cmp	r0, #0
 8004708:	d0f2      	beq.n	80046f0 <_realloc_r+0x1c>
 800470a:	4631      	mov	r1, r6
 800470c:	4622      	mov	r2, r4
 800470e:	f7ff fbf7 	bl	8003f00 <memcpy>
 8004712:	4631      	mov	r1, r6
 8004714:	4638      	mov	r0, r7
 8004716:	f7ff ff33 	bl	8004580 <_free_r>
 800471a:	e7e9      	b.n	80046f0 <_realloc_r+0x1c>
 800471c:	4635      	mov	r5, r6
 800471e:	e7e7      	b.n	80046f0 <_realloc_r+0x1c>

08004720 <_sbrk_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4d06      	ldr	r5, [pc, #24]	; (800473c <_sbrk_r+0x1c>)
 8004724:	2300      	movs	r3, #0
 8004726:	4604      	mov	r4, r0
 8004728:	4608      	mov	r0, r1
 800472a:	602b      	str	r3, [r5, #0]
 800472c:	f7fc f9ce 	bl	8000acc <_sbrk>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d102      	bne.n	800473a <_sbrk_r+0x1a>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b103      	cbz	r3, 800473a <_sbrk_r+0x1a>
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	2000409c 	.word	0x2000409c

08004740 <__malloc_lock>:
 8004740:	4801      	ldr	r0, [pc, #4]	; (8004748 <__malloc_lock+0x8>)
 8004742:	f000 b811 	b.w	8004768 <__retarget_lock_acquire_recursive>
 8004746:	bf00      	nop
 8004748:	200040a4 	.word	0x200040a4

0800474c <__malloc_unlock>:
 800474c:	4801      	ldr	r0, [pc, #4]	; (8004754 <__malloc_unlock+0x8>)
 800474e:	f000 b80c 	b.w	800476a <__retarget_lock_release_recursive>
 8004752:	bf00      	nop
 8004754:	200040a4 	.word	0x200040a4

08004758 <_malloc_usable_size_r>:
 8004758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475c:	1f18      	subs	r0, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	bfbc      	itt	lt
 8004762:	580b      	ldrlt	r3, [r1, r0]
 8004764:	18c0      	addlt	r0, r0, r3
 8004766:	4770      	bx	lr

08004768 <__retarget_lock_acquire_recursive>:
 8004768:	4770      	bx	lr

0800476a <__retarget_lock_release_recursive>:
 800476a:	4770      	bx	lr

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
